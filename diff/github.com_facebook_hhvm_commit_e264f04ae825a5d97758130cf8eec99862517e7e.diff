From e264f04ae825a5d97758130cf8eec99862517e7e Mon Sep 17 00:00:00 2001
From: "mwilliams@fb.com" <mwilliams@fb.com>
Date: Mon, 1 Aug 2016 15:13:07 -0700
Subject: [PATCH] Fix self recursion in compact

Summary: There were no checks at all.

Reviewed By: alexmalyshev

Differential Revision: D3623763

fbshipit-source-id: 9d708deca05bbd121503e8f323b4f295fde8e835
---
 hphp/runtime/ext/array/ext_array.cpp          | 34 ++++++++++++-------
 .../slow/array_functions/self_recursive.php   |  1 +
 .../self_recursive.php.expectf                |  5 ++-
 3 files changed, 27 insertions(+), 13 deletions(-)

diff --git a/hphp/runtime/ext/array/ext_array.cpp b/hphp/runtime/ext/array/ext_array.cpp
index d702c9831c68..7b3429a498be 100644
--- a/hphp/runtime/ext/array/ext_array.cpp
+++ b/hphp/runtime/ext/array/ext_array.cpp
@@ -379,10 +379,10 @@ static void php_array_merge(Array &arr1, const Array& arr2) {
   arr1.merge(arr2);
 }
 
-static bool couldRecur(const Variant& v, const Array& arr) {
+static bool couldRecur(const Variant& v, const ArrayData* arr) {
   return v.isReferenced() ||
-    arr.get()->kind() == ArrayData::kGlobalsKind ||
-    arr.get()->kind() == ArrayData::kProxyKind;
+    arr->kind() == ArrayData::kGlobalsKind ||
+    arr->kind() == ArrayData::kProxyKind;
 }
 
 static void php_array_merge_recursive(PointerSet &seen, bool check,
@@ -403,7 +403,7 @@ static void php_array_merge_recursive(PointerSet &seen, bool check,
       Variant &v = arr1.lvalAt(key, AccessFlags::Key);
       auto subarr1 = v.toArray().copy();
       php_array_merge_recursive(seen,
-                                couldRecur(v, subarr1),
+                                couldRecur(v, subarr1.get()),
                                 subarr1,
                                 value.toArray());
       v.unset(); // avoid contamination of the value that was strongly bound
@@ -593,7 +593,7 @@ static void php_array_replace_recursive(PointerSet &seen, bool check,
       if (v.isArray()) {
         Array subarr1 = v.toArray();
         const ArrNR& arr_value = value.toArrNR();
-        php_array_replace_recursive(seen, couldRecur(v, subarr1),
+        php_array_replace_recursive(seen, couldRecur(v, subarr1.get()),
                                     subarr1, arr_value);
         v = subarr1;
       } else {
@@ -1217,11 +1217,19 @@ bool HHVM_FUNCTION(array_walk,
   return true;
 }
 
-static void compact(VarEnv* v, Array &ret, const Variant& var) {
+static void compact(PointerSet& seen,
+                    VarEnv* v, Array &ret, const Variant& var) {
   if (var.isArray()) {
-    for (ArrayIter iter(var.getArrayData()); iter; ++iter) {
-      compact(v, ret, iter.second());
+    auto adata = var.getArrayData();
+    auto check = couldRecur(var, adata);
+    if (check && !seen.insert(adata).second) {
+      raise_warning("compact(): recursion detected");
+      return;
     }
+    for (ArrayIter iter(adata); iter; ++iter) {
+      compact(seen, v, ret, iter.secondRef());
+    }
+    if (check) seen.erase(adata);
   } else {
     String varname = var.toString();
     if (!varname.empty() && v->lookup(varname.get()) != NULL) {
@@ -1237,8 +1245,9 @@ Array HHVM_FUNCTION(compact,
   Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));
   VarEnv* v = g_context->getOrCreateVarEnv();
   if (v) {
-    compact(v, ret, varname);
-    compact(v, ret, args);
+    PointerSet seen;
+    compact(seen, v, ret, varname);
+    if (!args.empty()) compact(seen, v, ret, args);
   }
   return ret;
 }
@@ -1250,8 +1259,9 @@ Array HHVM_FUNCTION(__SystemLib_compact_sl,
   Array ret = Array::attach(PackedArray::MakeReserve(args.size() + 1));
   VarEnv* v = g_context->getOrCreateVarEnv();
   if (v) {
-    compact(v, ret, varname);
-    compact(v, ret, args);
+    PointerSet seen;
+    compact(seen, v, ret, varname);
+    if (!args.empty()) compact(seen, v, ret, args);
   }
   return ret;
 }
diff --git a/hphp/test/slow/array_functions/self_recursive.php b/hphp/test/slow/array_functions/self_recursive.php
index 09920767439c..5eb3708be3a6 100644
--- a/hphp/test/slow/array_functions/self_recursive.php
+++ b/hphp/test/slow/array_functions/self_recursive.php
@@ -15,6 +15,7 @@ function main() {
 
   test($a);
   test($GLOBALS);
+  var_dump(compact($a));
 }
 
 main();
diff --git a/hphp/test/slow/array_functions/self_recursive.php.expectf b/hphp/test/slow/array_functions/self_recursive.php.expectf
index 0a3eff14b497..c378aa8baaf7 100644
--- a/hphp/test/slow/array_functions/self_recursive.php.expectf
+++ b/hphp/test/slow/array_functions/self_recursive.php.expectf
@@ -1,4 +1,3 @@
-
 Warning: array_replace_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 6
 
 Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9
@@ -10,3 +9,7 @@ Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_funct
 Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9
 
 Warning: array_merge_recursive(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 9
+
+Warning: compact(): recursion detected in %s/test/slow/array_functions/self_recursive.php on line 18
+array(0) {
+}
\ No newline at end of file
