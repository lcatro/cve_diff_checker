From 25d0e853b0a301d99ac5b82bb6e9e366d42ffdf0 Mon Sep 17 00:00:00 2001
From: Bob den Otter <bob@twokings.nl>
Date: Thu, 7 May 2020 14:11:54 +0200
Subject: [PATCH 1/3] Check CSRF on Preview page

---
 src/Config.php                             | 2 +-
 src/Controller/Async/FilesystemManager.php | 4 +++-
 src/Controller/Frontend.php                | 7 +++++++
 3 files changed, 11 insertions(+), 2 deletions(-)

diff --git a/src/Config.php b/src/Config.php
index 887906fd39..45fae97bc8 100644
--- a/src/Config.php
+++ b/src/Config.php
@@ -311,7 +311,7 @@ protected function parseGeneral()
             }
 
             // To remove unacceptable / unwanted extensions from the list of Acceptable File Types
-            $removeFromAllowedFileTypes = explode('|', 'sh|asp|cgi|php|php3|ph3|php4|ph4|php5|ph5|phtm|phtml');
+            $removeFromAllowedFileTypes = explode('|', 'sh|asp|cgi|php|php3|ph3|php4|ph4|php5|ph5|phtm|phtml|exe');
 
             // Create a bag with lowercased extensions
             $bag = Bag::from($general['accept_file_types']);
diff --git a/src/Controller/Async/FilesystemManager.php b/src/Controller/Async/FilesystemManager.php
index 29bb56fe1f..3735664033 100644
--- a/src/Controller/Async/FilesystemManager.php
+++ b/src/Controller/Async/FilesystemManager.php
@@ -428,6 +428,7 @@ public function renameFolder(Request $request)
     private function isExtensionChangedAndIsChangeAllowed($oldName, $newName)
     {
         $user = $this->getUser();
+
         if ($this->users()->hasRole($user['id'], 'root') || $this->users()->hasRole($user['id'], 'admin')) {
             return true;
         }
@@ -465,11 +466,12 @@ private function validateFileExtension($filename)
         if ($filename[0] === '.') {
             return false;
         }
+
         // only whitelisted extensions
         $extension = pathinfo($filename, PATHINFO_EXTENSION);
         $allowedExtensions = $this->getAllowedUploadExtensions();
 
-        return $extension === '' || in_array(mb_strtolower($extension), $allowedExtensions);
+        return in_array(mb_strtolower($extension), $allowedExtensions);
     }
 
     /**
diff --git a/src/Controller/Frontend.php b/src/Controller/Frontend.php
index b5484cf0d4..d969f65019 100644
--- a/src/Controller/Frontend.php
+++ b/src/Controller/Frontend.php
@@ -17,6 +17,7 @@
 use Bolt\Storage\Repository\TaxonomyRepository;
 use Bolt\Translation\Translator as Trans;
 use Silex\ControllerCollection;
+use Symfony\Component\HttpFoundation\JsonResponse;
 use Symfony\Component\HttpFoundation\RedirectResponse;
 use Symfony\Component\HttpFoundation\Request;
 use Symfony\Component\HttpFoundation\Response;
@@ -203,6 +204,12 @@ public function preview(Request $request, $contenttypeslug)
             throw new MethodNotAllowedHttpException(['POST'], 'This route only accepts POST requests.');
         }
 
+        // Only accept requests with a valid token
+        $tokenValue = $request->request->get('content_edit', ['_token' => null])['_token'];
+        if (!$this->isAllowed('dashboard') || !$this->isCsrfTokenValid($tokenValue, 'content_edit')) {
+            return new Response('Not allowed or invalid CSRF token', Response::HTTP_FORBIDDEN);
+        }
+
         $contenttype = $this->getContentType($contenttypeslug);
         $formValues = $request->request->all();
 

From 1ca91d974a44b9d168ad79fb8534d36ff5b910d2 Mon Sep 17 00:00:00 2001
From: Bob den Otter <bob@twokings.nl>
Date: Thu, 7 May 2020 14:22:31 +0200
Subject: [PATCH 2/3] Update FilesystemManagerTest.php

---
 .../Async/FilesystemManagerTest.php           | 22 +++++++++++++++++--
 1 file changed, 20 insertions(+), 2 deletions(-)

diff --git a/tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php b/tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php
index 6ef190f79c..06c41469ec 100644
--- a/tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php
+++ b/tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php
@@ -25,9 +25,10 @@ class FilesystemManagerTest extends ControllerUnitTest
 {
     const FILESYSTEM = 'files';
 
-    const FILE_NAME = '__phpunit_test_file_delete_me';
+    const FILE_NAME = '__phpunit_test_file_delete_me.txt';
     const FILE_NAME_NOT_ALLOWED = '__phpunit_test_file_delete_me.exe';
-    const FILE_NAME_2 = '__phpunit_test_file_2_delete_me';
+    const FILE_NAME_NOT_ALLOWED_2 = '__phpunit_test_file_delete_me';
+    const FILE_NAME_2 = '__phpunit_test_file_2_delete_me.txt';
     const FOLDER_NAME = '__phpunit_test_folder_delete_me';
     const FOLDER_NAME_2 = '__phpunit_test_folder_2_delete_me';
 
@@ -153,6 +154,23 @@ public function testCreateFileInvalidExtension()
         $this->assertFalse($this->getService('filesystem')->has(self::FILESYSTEM . '://' . self::FILE_NAME_NOT_ALLOWED));
     }
 
+    public function testCreateFileInvalidExtension2()
+    {
+        $this->setRequest(Request::create('/async/file/create', 'POST', [
+            'namespace'  => self::FILESYSTEM,
+            'parentPath' => '',
+            'filename'   => self::FILE_NAME_NOT_ALLOWED_2,
+            'token'      => $this->token,
+        ]));
+        $response = $this->controller()->createFile($this->getRequest());
+
+        $this->assertInstanceOf(JsonResponse::class, $response);
+        $this->assertEquals(Response::HTTP_BAD_REQUEST, $response->getStatusCode());
+
+        // Test whether the new file is not saved
+        $this->assertFalse($this->getService('filesystem')->has(self::FILESYSTEM . '://' . self::FILE_NAME_NOT_ALLOWED));
+    }
+
     /**
      * Duplicating a file five times should create FILENAME_copy1-5.EXT. This should work for both regular filenames
      * and dotfiles.

From aba99d2744dac846bd6c4617ddd64223c5e6f2f7 Mon Sep 17 00:00:00 2001
From: Bob den Otter <bob@twokings.nl>
Date: Thu, 7 May 2020 14:43:18 +0200
Subject: [PATCH 3/3] More test fixes.

---
 tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php | 2 +-
 tests/phpunit/unit/Controller/FrontendTest.php                | 3 +--
 2 files changed, 2 insertions(+), 3 deletions(-)

diff --git a/tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php b/tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php
index 06c41469ec..62306ca2a8 100644
--- a/tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php
+++ b/tests/phpunit/unit/Controller/Async/FilesystemManagerTest.php
@@ -273,7 +273,7 @@ public function testInvalidRename()
              * Object doesn't exist
              */
             $this->createObject($object, $data['old']);
-            $response = $this->renameObject($object, $data['old'] . '_nonexistent', $data['new']);
+            $response = $this->renameObject($object, $data['old'] . '_nonexistent.txt', $data['new']);
 
             $this->assertInstanceOf(JsonResponse::class, $response);
             $this->assertEquals(Response::HTTP_NOT_FOUND, $response->getStatusCode());
diff --git a/tests/phpunit/unit/Controller/FrontendTest.php b/tests/phpunit/unit/Controller/FrontendTest.php
index c3ce64c557..945ba0289f 100644
--- a/tests/phpunit/unit/Controller/FrontendTest.php
+++ b/tests/phpunit/unit/Controller/FrontendTest.php
@@ -328,8 +328,7 @@ public function testPreview()
 
         $response = $this->controller()->preview($this->getRequest(), 'pages');
 
-        $this->assertTrue($response instanceof TemplateView);
-        $this->assertSame('record.twig', $response->getTemplate());
+        $this->assertFalse($response instanceof TemplateView);
     }
 
     public function testListing()
