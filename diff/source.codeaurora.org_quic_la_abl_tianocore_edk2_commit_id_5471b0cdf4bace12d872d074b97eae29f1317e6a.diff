From 5471b0cdf4bace12d872d074b97eae29f1317e6a Mon Sep 17 00:00:00 2001
From: lijuang <lijuang@codeaurora.org>
Date: Fri, 29 Sep 2017 10:44:33 +0800
Subject: QcomModulePkg: Size and null checks for FastbootMenu

1. Use an empty string instead of NULL terminator in array
initialization
2. Use "sizeof" for arrays, "AsciiStrlen" is used for char ptr

Change-Id: I2c92216347db6594ad5586e6861f1af9b84e50bd
---
 QcomModulePkg/Library/BootLib/FastbootMenu.c | 31 ++++++++++++++++------------
 1 file changed, 18 insertions(+), 13 deletions(-)

diff --git a/QcomModulePkg/Library/BootLib/FastbootMenu.c b/QcomModulePkg/Library/BootLib/FastbootMenu.c
index c96c389..837ec74 100644
--- a/QcomModulePkg/Library/BootLib/FastbootMenu.c
+++ b/QcomModulePkg/Library/BootLib/FastbootMenu.c
@@ -148,9 +148,9 @@ STATIC EFI_STATUS FastbootMenuShowScreen(OPTION_MENU_INFO *OptionMenuInfo)
 	UINT32  OptionItem = 0;
 	UINT32  Height = 0;
 	UINT32  i = 0;
-	CHAR8 StrTemp[MAX_RSP_SIZE] = "\0";
-	CHAR8 StrTemp1[MAX_RSP_SIZE] = "\0";
-	CHAR8 VersionTemp[MAX_VERSION_LEN] = "\0";
+    CHAR8 StrTemp[MAX_RSP_SIZE] = "";
+    CHAR8 StrTemp1[MAX_RSP_SIZE] = "";
+    CHAR8 VersionTemp[MAX_VERSION_LEN] = "";
 
 	ZeroMem(&OptionMenuInfo->Info, sizeof(MENU_OPTION_ITEM_INFO));
 
@@ -180,32 +180,37 @@ STATIC EFI_STATUS FastbootMenuShowScreen(OPTION_MENU_INFO *OptionMenuInfo)
 			BoardHwPlatformName(StrTemp, sizeof(StrTemp));
 			GetRootDeviceType(StrTemp1, sizeof(StrTemp1));
 
-			AsciiStrnCatS(mFastbootCommonMsgInfo[i].Msg, sizeof(mFastbootCommonMsgInfo[i].Msg),
-				StrTemp, AsciiStrLen(StrTemp));
+            AsciiStrnCatS (mFastbootCommonMsgInfo[i].Msg,
+                        sizeof (mFastbootCommonMsgInfo[i].Msg),
+                        StrTemp, sizeof (StrTemp));
 			AsciiStrnCatS(mFastbootCommonMsgInfo[i].Msg, sizeof(mFastbootCommonMsgInfo[i].Msg),
 				" ", AsciiStrLen(" "));
-			AsciiStrnCatS(mFastbootCommonMsgInfo[i].Msg, sizeof(mFastbootCommonMsgInfo[i].Msg),
-				StrTemp1, AsciiStrLen(StrTemp1));
+            AsciiStrnCatS (mFastbootCommonMsgInfo[i].Msg,
+                        sizeof (mFastbootCommonMsgInfo[i].Msg),
+                        StrTemp1, sizeof (StrTemp1));
 			break;
 		case 4:
 			/* Get bootloader version */
 			GetBootloaderVersion(VersionTemp, sizeof(VersionTemp));
-			AsciiStrnCatS(mFastbootCommonMsgInfo[i].Msg, sizeof(mFastbootCommonMsgInfo[i].Msg),
-				VersionTemp, AsciiStrLen(VersionTemp));
+            AsciiStrnCatS (mFastbootCommonMsgInfo[i].Msg,
+                        sizeof (mFastbootCommonMsgInfo[i].Msg),
+                        VersionTemp, sizeof (VersionTemp));
 			break;
 		case 5:
 			/* Get baseband version */
 			ZeroMem(VersionTemp, sizeof(VersionTemp));
 			GetRadioVersion(VersionTemp, sizeof(VersionTemp));
-			AsciiStrnCatS(mFastbootCommonMsgInfo[i].Msg, sizeof(mFastbootCommonMsgInfo[i].Msg),
-				VersionTemp, AsciiStrLen(VersionTemp));
+            AsciiStrnCatS (mFastbootCommonMsgInfo[i].Msg,
+                        sizeof (mFastbootCommonMsgInfo[i].Msg),
+                        VersionTemp, sizeof (VersionTemp));
 			break;
 		case 6:
 			/* Get serial number */
 			ZeroMem(StrTemp, sizeof(StrTemp));
 			BoardSerialNum(StrTemp, MAX_RSP_SIZE);
-			AsciiStrnCatS(mFastbootCommonMsgInfo[i].Msg, sizeof(mFastbootCommonMsgInfo[i].Msg),
-				StrTemp, AsciiStrLen(StrTemp));
+            AsciiStrnCatS (mFastbootCommonMsgInfo[i].Msg,
+                        sizeof (mFastbootCommonMsgInfo[i].Msg),
+                        StrTemp, sizeof (StrTemp));
 			break;
 		case 7:
 			/* Get secure boot value */
-- 
cgit v1.1

