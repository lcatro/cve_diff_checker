From 69d2fd2c597ffc0c217de1238b9bf4d4bceba8e6 Mon Sep 17 00:00:00 2001
From: "Christoph M. Becker" <cmbecker69@gmx.de>
Date: Sat, 17 Dec 2016 17:06:58 +0100
Subject: [PATCH] Fix #354: Signed Integer Overflow gd_io.c

GD2 stores the number of horizontal and vertical chunks as words (i.e. 2
byte unsigned). These values are multiplied and assigned to an int when
reading the image, what can cause integer overflows. We have to avoid
that, and also make sure that either chunk count is actually greater
than zero. If illegal chunk counts are detected, we bail out from
reading the image.
---
 src/gd_gd2.c             |   4 ++++
 tests/gd2/.gitignore     |   1 +
 tests/gd2/CMakeLists.txt |   1 +
 tests/gd2/Makemodule.am  |   3 +++
 tests/gd2/bug00354.c     |  32 ++++++++++++++++++++++++++++++++
 tests/gd2/bug00354a.gd2  | Bin 0 -> 92 bytes
 tests/gd2/bug00354b.gd2  | Bin 0 -> 18 bytes
 7 files changed, 41 insertions(+)
 create mode 100644 tests/gd2/bug00354.c
 create mode 100644 tests/gd2/bug00354a.gd2
 create mode 100644 tests/gd2/bug00354b.gd2

diff --git a/src/gd_gd2.c b/src/gd_gd2.c
index d07828c78..c2904cafa 100644
--- a/src/gd_gd2.c
+++ b/src/gd_gd2.c
@@ -209,6 +209,10 @@ _gd2GetHeader (gdIOCtxPtr in, int *sx, int *sy,
 	GD2_DBG (printf ("%d Chunks vertically\n", *ncy));
 
 	if (gd2_compressed (*fmt)) {
+		if (*ncx <= 0 || *ncy <= 0 || *ncx > INT_MAX / *ncy) {
+			GD2_DBG(printf ("Illegal chunk counts: %d * %d\n", *ncx, *ncy));
+			goto fail1;
+		}
 		nc = (*ncx) * (*ncy);
 
 		GD2_DBG (printf ("Reading %d chunk index entries\n", nc));
diff --git a/tests/gd2/.gitignore b/tests/gd2/.gitignore
index 39d8bf4eb..8d3ee850f 100644
--- a/tests/gd2/.gitignore
+++ b/tests/gd2/.gitignore
@@ -1,5 +1,6 @@
 /bug_289
 /bug00309
+/bug00354
 /gd2_empty_file
 /gd2_im2im
 /gd2_null
diff --git a/tests/gd2/CMakeLists.txt b/tests/gd2/CMakeLists.txt
index 5a61d113a..36de57378 100644
--- a/tests/gd2/CMakeLists.txt
+++ b/tests/gd2/CMakeLists.txt
@@ -1,6 +1,7 @@
 LIST(APPEND TESTS_FILES
 	bug_289
 	bug00309
+	bug00354
 	gd2_empty_file
 	gd2_im2im
 	gd2_null
diff --git a/tests/gd2/Makemodule.am b/tests/gd2/Makemodule.am
index c1fbf440a..0322bd021 100644
--- a/tests/gd2/Makemodule.am
+++ b/tests/gd2/Makemodule.am
@@ -1,6 +1,7 @@
 libgd_test_programs += \
 	gd2/bug_289 \
 	gd2/bug00309 \
+	gd2/bug00354 \
 	gd2/gd2_empty_file \
 	gd2/php_bug_72339 \
 	gd2/gd2_read_corrupt \
@@ -19,6 +20,8 @@ endif
 
 EXTRA_DIST += \
 	gd2/CMakeLists.txt \
+	gd2/bug00354a.gd2 \
+	gd2/bug00354b.gd2 \
 	gd2/conv_gd2_exp.gd2 \
 	gd2/conv_test.gd2 \
 	gd2/conv_test_exp.png \
diff --git a/tests/gd2/bug00354.c b/tests/gd2/bug00354.c
new file mode 100644
index 000000000..cc64254d2
--- /dev/null
+++ b/tests/gd2/bug00354.c
@@ -0,0 +1,32 @@
+/**
+ * We're testing GD2 image files which report illegal chunk counts. These should
+ * not cause integer overflows or other issues, but instead simply fail to be
+ * loaded.
+ *
+ * See also <https://github.com/libgd/libgd/issues/354>.
+ */
+
+
+#include "gd.h"
+#include "gdtest.h"
+
+
+int main()
+{
+    gdImagePtr im;
+    FILE *fp;
+
+    fp = gdTestFileOpen2("gd2", "bug00354a.gd2");
+    gdTestAssert(fp != NULL);
+    im = gdImageCreateFromGd2(fp);
+    gdTestAssert(im == NULL);
+    fclose(fp);
+
+    fp = gdTestFileOpen2("gd2", "bug00354b.gd2");
+    gdTestAssert(fp != NULL);
+    im = gdImageCreateFromGd2(fp);
+    gdTestAssert(im == NULL);
+    fclose(fp);
+
+    return gdNumFailures();
+}
diff --git a/tests/gd2/bug00354a.gd2 b/tests/gd2/bug00354a.gd2
new file mode 100644
index 0000000000000000000000000000000000000000..5060bfde3aad5687c0a962a8eddf86c0a83dded9
GIT binary patch
literal 92
zcmYdKF=Aj~Vn_kP1_qY@zyAMbU|^63Vq3=lKu|H~?Lk9EAotLMul{dSxfcMLM1ThA
IISver0HbRYrvLx|

literal 0
HcmV?d00001

diff --git a/tests/gd2/bug00354b.gd2 b/tests/gd2/bug00354b.gd2
new file mode 100644
index 0000000000000000000000000000000000000000..8600126becb28c0962812c00fc6f2919b9f2ba80
GIT binary patch
literal 18
VcmYdKF=Aj~G5`XG1`y4_001560-^u_

literal 0
HcmV?d00001

