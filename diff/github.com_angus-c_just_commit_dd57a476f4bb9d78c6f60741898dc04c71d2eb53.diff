From dd57a476f4bb9d78c6f60741898dc04c71d2eb53 Mon Sep 17 00:00:00 2001
From: angus croll <anguscroll@gmail.com>
Date: Sat, 8 May 2021 12:44:36 -0700
Subject: [PATCH] add proto check (#267)

---
 packages/object-safe-set/index.js     |  8 ++++++++
 packages/object-safe-set/package.json |  2 +-
 test/object-safe-set/index.js         | 21 +++++++++++++++++++++
 3 files changed, 30 insertions(+), 1 deletion(-)

diff --git a/packages/object-safe-set/index.js b/packages/object-safe-set/index.js
index 9ae36def..8387c498 100644
--- a/packages/object-safe-set/index.js
+++ b/packages/object-safe-set/index.js
@@ -34,8 +34,10 @@ function set(obj, props, value) {
   if (!lastProp) {
     return false;
   }
+  prototypeCheck(lastProp);
   var thisProp;
   while ((thisProp = props.shift())) {
+    prototypeCheck(thisProp);
     if (typeof obj[thisProp] == 'undefined') {
       obj[thisProp] = {};
     }
@@ -47,3 +49,9 @@ function set(obj, props, value) {
   obj[lastProp] = value;
   return true;
 }
+
+function prototypeCheck(prop) {
+  if (prop === '__proto__' || prop === 'constructor' || prop === 'prototype') {
+    throw new Error('setting of prototype values not supported');
+  }
+}
diff --git a/packages/object-safe-set/package.json b/packages/object-safe-set/package.json
index e69bc60c..0ea8823b 100644
--- a/packages/object-safe-set/package.json
+++ b/packages/object-safe-set/package.json
@@ -1,6 +1,6 @@
 {
   "name": "just-safe-set",
-  "version": "2.2.1",
+  "version": "2.2.2",
   "description": "set value at property, create intermediate properties if necessary",
   "main": "index.js",
   "types": "index.d.ts",
diff --git a/test/object-safe-set/index.js b/test/object-safe-set/index.js
index ea92f98a..b1c289f3 100644
--- a/test/object-safe-set/index.js
+++ b/test/object-safe-set/index.js
@@ -66,6 +66,27 @@ test("doesn't interrupt property chain, using array arg", function(t) {
   t.end();
 });
 
+test("doesn't support setting of prototype (and related) values", function(t) {
+  t.plan(4);
+  t.throws(function() {
+    var obj1 = {a: {}};
+    set(obj1, '__proto__.x', function malice() {});
+  });
+  t.throws(function() {
+    var obj1 = {a: {}};
+    set(obj1, ['a', 'b', '__proto__'], {toString: 'hehehe'});
+  });
+  t.throws(function() {
+    var obj2 = {a: {}};
+    set(obj2, 'constructor', function FakeConstructor() {});
+  });
+  t.throws(function() {
+    var obj3 = {a: {}};
+    set(obj3, 'prototype.y', 'hahahaha');
+  });
+  t.end();
+});
+
 /* eslint-disable no-undef*/
 if (typeof Symbol === 'function') {
   test('supports symbol prop', function(t) {
