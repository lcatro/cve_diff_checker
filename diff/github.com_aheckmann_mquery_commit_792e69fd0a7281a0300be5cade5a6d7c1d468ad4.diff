From 792e69fd0a7281a0300be5cade5a6d7c1d468ad4 Mon Sep 17 00:00:00 2001
From: Valeri Karpov <val@karpov.io>
Date: Thu, 10 Dec 2020 15:24:30 -0500
Subject: [PATCH] fix(utils): avoid copying special properties like `__proto__`
 when merging and cloning

---
 lib/utils.js       | 11 +++++++++++
 test/utils.test.js | 18 ++++++++++++++++++
 2 files changed, 29 insertions(+)

diff --git a/lib/utils.js b/lib/utils.js
index ef51712..fba56c8 100644
--- a/lib/utils.js
+++ b/lib/utils.js
@@ -7,6 +7,8 @@
 var Buffer = require('safe-buffer').Buffer;
 var RegExpClone = require('regexp-clone');
 
+var specialProperties = ['__proto__', 'constructor', 'prototype'];
+
 /**
  * Clones objects
  *
@@ -69,6 +71,12 @@ exports.cloneObject = function cloneObject(obj, options) {
   var k;
 
   for (k in obj) {
+    // Not technically prototype pollution because this wouldn't merge properties
+    // onto `Object.prototype`, but avoid properties like __proto__ as a precaution.
+    if (specialProperties.indexOf(k) !== -1) {
+      continue;
+    }
+
     val = clone(obj[k], options);
 
     if (!minimize || ('undefined' !== typeof val)) {
@@ -133,6 +141,9 @@ exports.merge = function merge(to, from) {
 
   while (i--) {
     key = keys[i];
+    if (specialProperties.indexOf(key) !== -1) {
+      continue;
+    }
     if ('undefined' === typeof to[key]) {
       to[key] = from[key];
     } else {
diff --git a/test/utils.test.js b/test/utils.test.js
index ff95f33..949da4e 100644
--- a/test/utils.test.js
+++ b/test/utils.test.js
@@ -140,5 +140,23 @@ describe('lib/utils', function() {
 
       done();
     });
+
+    it('skips __proto__', function() {
+      var payload = JSON.parse('{"__proto__": {"polluted": "vulnerable"}}');
+      var res = utils.clone(payload);
+
+      assert.strictEqual({}.polluted, void 0);
+      assert.strictEqual(res.__proto__, Object.prototype);
+    });
+  });
+
+  describe('merge', function() {
+    it('avoids prototype pollution', function() {
+      var payload = JSON.parse('{"__proto__": {"polluted": "vulnerable"}}');
+      var obj = {};
+      utils.merge(obj, payload);
+
+      assert.strictEqual({}.polluted, void 0);
+    });
   });
 });
