From ed02c0ccd6f7461a69d64903738372eaf21babcd Mon Sep 17 00:00:00 2001
From: Zhaoyang Liu <zhaoyang@codeaurora.org>
Date: Thu, 19 Oct 2017 13:27:04 +0800
Subject: qcacld-2.0: avoid double free chip power stats buffer

Add mutex lock to block concurrent threads access power status
debugfs reading operation. This way can avoid the risk of
double free power stats memory buffer.

Change-Id: I3c074a03cd208648fd0ea83d30b9680e5ec9c27b
CRs-Fixed: 2111922
---
 CORE/HDD/inc/wlan_hdd_main.h    |  5 +++++
 CORE/HDD/src/wlan_hdd_debugfs.c | 46 ++++++++++++++++++++++++++++++++---------
 2 files changed, 41 insertions(+), 10 deletions(-)

diff --git a/CORE/HDD/inc/wlan_hdd_main.h b/CORE/HDD/inc/wlan_hdd_main.h
index 10da269..8d3b230 100644
--- a/CORE/HDD/inc/wlan_hdd_main.h
+++ b/CORE/HDD/inc/wlan_hdd_main.h
@@ -1926,6 +1926,11 @@ struct hdd_context_s
     /* debugfs entry */
     struct dentry *debugfs_phy;
 
+#ifdef WLAN_POWER_DEBUGFS
+    /* mutex lock to block concurrent access */
+    struct mutex power_stats_lock;
+#endif
+
     /* Use below lock to protect access to isSchedScanUpdatePending
      * since it will be accessed in two different contexts.
      */
diff --git a/CORE/HDD/src/wlan_hdd_debugfs.c b/CORE/HDD/src/wlan_hdd_debugfs.c
index 4d243a0..3454a77 100644
--- a/CORE/HDD/src/wlan_hdd_debugfs.c
+++ b/CORE/HDD/src/wlan_hdd_debugfs.c
@@ -709,6 +709,8 @@ static ssize_t __wlan_hdd_read_power_debugfs(struct file *file,
 	if (0 != ret_cnt)
 		return ret_cnt;
 
+	mutex_lock(&hdd_ctx->power_stats_lock);
+
 	if (adapter->chip_power_stats)
 		vos_mem_free(adapter->chip_power_stats);
 
@@ -723,7 +725,8 @@ static ssize_t __wlan_hdd_read_power_debugfs(struct file *file,
 					hdd_power_debugstats_cb,
 					&context)) {
 		hddLog(LOGE, FL("chip power stats request failed"));
-		return -EINVAL;
+		ret_cnt = -EINVAL;
+		goto out;
 	}
 
 	rc = wait_for_completion_timeout(&context.completion,
@@ -734,13 +737,15 @@ static ssize_t __wlan_hdd_read_power_debugfs(struct file *file,
 		spin_lock(&hdd_context_lock);
 		context.magic = 0;
 		spin_unlock(&hdd_context_lock);
-		return -ETIMEDOUT;
+		ret_cnt = -ETIMEDOUT;
+		goto out;
 	}
 
 	chip_power_stats = adapter->chip_power_stats;
 	if (!chip_power_stats) {
 		hddLog(LOGE, FL("Power stats retrieval fails!"));
-		return -EINVAL;
+		ret_cnt = -EINVAL;
+		goto out;
 	}
 
 	power_debugfs_buf = vos_mem_malloc(POWER_DEBUGFS_BUFFER_MAX_LEN);
@@ -748,7 +753,8 @@ static ssize_t __wlan_hdd_read_power_debugfs(struct file *file,
 		hddLog(LOGE, FL("Power stats buffer alloc fails!"));
 		vos_mem_free(chip_power_stats);
 		adapter->chip_power_stats = NULL;
-		return -EINVAL;
+		ret_cnt = -EINVAL;
+		goto out;
 	}
 
 	len += scnprintf(power_debugfs_buf, POWER_DEBUGFS_BUFFER_MAX_LEN,
@@ -782,6 +788,9 @@ static ssize_t __wlan_hdd_read_power_debugfs(struct file *file,
 	ret_cnt = simple_read_from_buffer(buf, count, pos,
 					power_debugfs_buf, len);
 	vos_mem_free(power_debugfs_buf);
+
+out:
+	mutex_unlock(&hdd_ctx->power_stats_lock);
 	return ret_cnt;
 }
 
@@ -871,12 +880,12 @@ static const struct file_operations fops_powerdebugs = {
 };
 
 /**
- * wlan_hdd_create_power_stats_file() - API to create power stats file
+ * wlan_hdd_init_power_stats_debugfs() - API to init power stats debugfs
  *
  * Return: VOS_STATUS
  */
-static VOS_STATUS wlan_hdd_create_power_stats_file(hdd_adapter_t *adapter,
-						hdd_context_t *hdd_ctx)
+static VOS_STATUS wlan_hdd_init_power_stats_debugfs(hdd_adapter_t *adapter,
+						    hdd_context_t *hdd_ctx)
 {
 	if (NULL == debugfs_create_file("power_stats",
 				S_IRUSR | S_IRGRP | S_IROTH,
@@ -884,15 +893,31 @@ static VOS_STATUS wlan_hdd_create_power_stats_file(hdd_adapter_t *adapter,
 				&fops_powerdebugs))
 		return VOS_STATUS_E_FAILURE;
 
+	mutex_init(&hdd_ctx->power_stats_lock);
+
 	return VOS_STATUS_SUCCESS;
 }
 
+/**
+ * wlan_hdd_deinit_power_stats_debugfs() - API to deinit power stats debugfs
+ *
+ * Return: None
+ */
+static void wlan_hdd_deinit_power_stats_debugfs(hdd_context_t *hdd_ctx)
+{
+	mutex_destroy(&hdd_ctx->power_stats_lock);
+}
 #else
-static VOS_STATUS wlan_hdd_create_power_stats_file(hdd_adapter_t *adapter,
-						hdd_context_t *hdd_ctx)
+static VOS_STATUS wlan_hdd_init_power_stats_debugfs(hdd_adapter_t *adapter,
+						    hdd_context_t *hdd_ctx)
 {
 	return VOS_STATUS_SUCCESS;
 }
+
+static void wlan_hdd_deinit_power_stats_debugfs(hdd_context_t *hdd_ctx)
+{
+	return;
+}
 #endif
 
 VOS_STATUS hdd_debugfs_init(hdd_adapter_t *pAdapter)
@@ -915,7 +940,7 @@ VOS_STATUS hdd_debugfs_init(hdd_adapter_t *pAdapter)
         pHddCtx->debugfs_phy, pAdapter, &fops_patterngen))
         return VOS_STATUS_E_FAILURE;
 
-    if (VOS_STATUS_SUCCESS != wlan_hdd_create_power_stats_file(pAdapter,
+    if (VOS_STATUS_SUCCESS != wlan_hdd_init_power_stats_debugfs(pAdapter,
                                                                 pHddCtx))
         return VOS_STATUS_E_FAILURE;
 
@@ -930,6 +955,7 @@ VOS_STATUS hdd_debugfs_init(hdd_adapter_t *pAdapter)
 
 void hdd_debugfs_exit(hdd_context_t *pHddCtx)
 {
+    wlan_hdd_deinit_power_stats_debugfs(pHddCtx);
     debugfs_remove_recursive(pHddCtx->debugfs_phy);
 }
 #endif /* #ifdef WLAN_OPEN_SOURCE */
-- 
cgit v1.1

