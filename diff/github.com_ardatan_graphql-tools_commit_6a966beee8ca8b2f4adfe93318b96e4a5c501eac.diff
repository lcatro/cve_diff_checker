From 6a966beee8ca8b2f4adfe93318b96e4a5c501eac Mon Sep 17 00:00:00 2001
From: Dotan Simha <dotansimha@gmail.com>
Date: Wed, 13 Jan 2021 12:22:00 +0200
Subject: [PATCH] Fix vulnerability in git-loader: use execFile instead of exec
 (#2470)

---
 .changeset/green-cycles-drive.md     |  5 +++++
 packages/loaders/git/src/load-git.ts | 10 +++++-----
 2 files changed, 10 insertions(+), 5 deletions(-)
 create mode 100644 .changeset/green-cycles-drive.md

diff --git a/.changeset/green-cycles-drive.md b/.changeset/green-cycles-drive.md
new file mode 100644
index 0000000000..59d6d29c25
--- /dev/null
+++ b/.changeset/green-cycles-drive.md
@@ -0,0 +1,5 @@
+---
+'@graphql-tools/git-loader': patch
+---
+
+Fix vulnerability: use execFile instead of exec
diff --git a/packages/loaders/git/src/load-git.ts b/packages/loaders/git/src/load-git.ts
index 4147d35f93..0f008dff89 100644
--- a/packages/loaders/git/src/load-git.ts
+++ b/packages/loaders/git/src/load-git.ts
@@ -1,10 +1,10 @@
-import { exec, execSync } from 'child_process';
+import { execFile, execFileSync } from 'child_process';
 
 type Input = { ref: string; path: string };
 
 const createLoadError = (error: any) => new Error('Unable to load file from git: ' + error);
-const createCommand = ({ ref, path }: Input) => {
-  return `git show ${ref}:${path}`;
+const createCommand = ({ ref, path }: Input): string[] => {
+  return ['show', `${ref}:${path}`];
 };
 
 /**
@@ -13,7 +13,7 @@ const createCommand = ({ ref, path }: Input) => {
 export async function loadFromGit(input: Input): Promise<string | never> {
   try {
     return await new Promise((resolve, reject) => {
-      exec(createCommand(input), { encoding: 'utf-8', maxBuffer: 1024 * 1024 * 1024 }, (error, stdout) => {
+      execFile('git', createCommand(input), { encoding: 'utf-8', maxBuffer: 1024 * 1024 * 1024 }, (error, stdout) => {
         if (error) {
           reject(error);
         } else {
@@ -31,7 +31,7 @@ export async function loadFromGit(input: Input): Promise<string | never> {
  */
 export function loadFromGitSync(input: Input): string | never {
   try {
-    return execSync(createCommand(input), { encoding: 'utf-8' });
+    return execFileSync('git', createCommand(input), { encoding: 'utf-8' });
   } catch (error) {
     throw createLoadError(error);
   }
