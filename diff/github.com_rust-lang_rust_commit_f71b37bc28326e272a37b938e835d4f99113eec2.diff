From 9733463d2b141a166bfa2f55ec316066ab0f71b6 Mon Sep 17 00:00:00 2001
From: Steven Fackler <sfackler@gmail.com>
Date: Sat, 23 Sep 2017 21:19:01 -0700
Subject: [PATCH 1/2] Fix capacity comparison in reserve

You can otherwise end up in a situation where you don't actually resize
but still call into handle_cap_increase which then corrupts head/tail.

Closes #44800
---
 src/liballoc/vec_deque.rs | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/src/liballoc/vec_deque.rs b/src/liballoc/vec_deque.rs
index 6836fbb7c4de3..6d64e9e303f76 100644
--- a/src/liballoc/vec_deque.rs
+++ b/src/liballoc/vec_deque.rs
@@ -558,7 +558,7 @@ impl<T> VecDeque<T> {
             .and_then(|needed_cap| needed_cap.checked_next_power_of_two())
             .expect("capacity overflow");
 
-        if new_cap > self.capacity() {
+        if new_cap > old_cap {
             self.buf.reserve_exact(used_cap, new_cap - used_cap);
             unsafe {
                 self.handle_cap_increase(old_cap);

From 81bac74c2ddc6c39f3628a36966f4a56a1282d02 Mon Sep 17 00:00:00 2001
From: Steven Fackler <sfackler@gmail.com>
Date: Sun, 24 Sep 2017 10:56:08 -0700
Subject: [PATCH 2/2] Add a run-pass-valgrind test for vecdeque issue

---
 src/test/run-pass-valgrind/issue-44800.rs | 25 +++++++++++++++++++++++
 1 file changed, 25 insertions(+)
 create mode 100644 src/test/run-pass-valgrind/issue-44800.rs

diff --git a/src/test/run-pass-valgrind/issue-44800.rs b/src/test/run-pass-valgrind/issue-44800.rs
new file mode 100644
index 0000000000000..cfde6f32f666f
--- /dev/null
+++ b/src/test/run-pass-valgrind/issue-44800.rs
@@ -0,0 +1,25 @@
+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT
+// file at the top-level directory of this distribution and at
+// http://rust-lang.org/COPYRIGHT.
+//
+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
+// option. This file may not be copied, modified, or distributed
+// except according to those terms.
+
+#![feature(global_allocator, alloc_system, allocator_api)]
+extern crate alloc_system;
+
+use std::collections::VecDeque;
+use alloc_system::System;
+
+#[global_allocator]
+static ALLOCATOR: System = System;
+
+fn main() {
+    let mut deque = VecDeque::with_capacity(32);
+    deque.push_front(0);
+    deque.reserve(31);
+    deque.push_back(0);
+}
