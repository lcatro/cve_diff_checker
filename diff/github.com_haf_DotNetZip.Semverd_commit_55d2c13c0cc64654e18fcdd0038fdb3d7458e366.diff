From 8e79ed7dc17fe6d3c74c7ac1344b2aa60eb30039 Mon Sep 17 00:00:00 2001
From: Andreia Gaita <shana@spoiledcat.net>
Date: Tue, 1 May 2018 14:12:37 +0200
Subject: [PATCH] Sanitize zip entry paths before extracting

Zip entries can contain relative paths that end up outside the extraction
directory if used as-is, for instance "..\..\..\..\file.txt", which can be
a potential security risk. This sanitizes all paths before extraction while
ensuring that valid relative paths are not lost.

- "a\..\c\file.txt" -> "c\file.txt"
- "a\..\..\c\file.txt" -> "c\file.txt"
- "..\..\..\..\c\file.txt" -> "c\file.txt"
- "a\b\..\c\file.txt" -> "a\c\file.txt"
- "a\b\c\..\e\..\..\f\file.txt" -> "a\f\file.txt"
---
 src/Zip Tests/Compatibility.cs                |  24 +++++++++++
 src/Zip Tests/Zip Tests.csproj                |   9 ++++
 .../zips/relative-paths-in-subdir-outside.zip | Bin 0 -> 547 bytes
 .../zips/relative-paths-in-subdir.zip         | Bin 0 -> 547 bytes
 src/Zip Tests/zips/relative-paths-outside.zip | Bin 0 -> 547 bytes
 src/Zip.Shared/Shared.cs                      |  40 ++++++++++++++++++
 src/Zip.Shared/ZipEntry.Extract.cs            |   2 +
 7 files changed, 75 insertions(+)
 create mode 100644 src/Zip Tests/zips/relative-paths-in-subdir-outside.zip
 create mode 100644 src/Zip Tests/zips/relative-paths-in-subdir.zip
 create mode 100644 src/Zip Tests/zips/relative-paths-outside.zip

diff --git a/src/Zip Tests/Compatibility.cs b/src/Zip Tests/Compatibility.cs
index f77d2fe..18bb6f7 100644
--- a/src/Zip Tests/Compatibility.cs	
+++ b/src/Zip Tests/Compatibility.cs	
@@ -2581,6 +2581,30 @@ public void Extract_AndroidApp()
         }
 
 
+        [TestMethod]
+        public void Extract_ZipWithRelativePathsOutside()
+        {
+            _Extract_ZipFile("relative-paths-outside.zip");
+            Assert.IsTrue(File.Exists(@"extract\good.txt"));
+            Assert.IsTrue(File.Exists(@"extract\Temp\evil.txt"));
+        }
+
+        [TestMethod]
+        public void Extract_ZipWithRelativePathsInSubdir()
+        {
+            _Extract_ZipFile("relative-paths-in-subdir.zip");
+            Assert.IsTrue(File.Exists(@"extract\good.txt"));
+            Assert.IsTrue(File.Exists(@"extract\Temp\evil.txt"));
+        }
+
+        [TestMethod]
+        public void Extract_ZipWithRelativePathsInSubdirOutside()
+        {
+            _Extract_ZipFile("relative-paths-in-subdir-outside.zip");
+            Assert.IsTrue(File.Exists(@"extract\good.txt"));
+            Assert.IsTrue(File.Exists(@"extract\Temp\evil.txt"));
+        }
+
         private void _Extract_ZipFile(string fileName)
         {
             TestContext.WriteLine("Current Dir: {0}", CurrentDir);
diff --git a/src/Zip Tests/Zip Tests.csproj b/src/Zip Tests/Zip Tests.csproj
index ed298ca..afe814a 100644
--- a/src/Zip Tests/Zip Tests.csproj	
+++ b/src/Zip Tests/Zip Tests.csproj	
@@ -159,6 +159,15 @@
     <Content Include="zips\wizzquiz.zip">
       <CopyToOutputDirectory>Always</CopyToOutputDirectory>
     </Content>
+    <Content Include="zips\relative-paths-in-subdir.zip">
+      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
+    </Content>
+    <Content Include="zips\relative-paths-outside.zip">
+      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
+    </Content>
+    <Content Include="zips\relative-paths-in-subdir-outside.zip">
+      <CopyToOutputDirectory>Always</CopyToOutputDirectory>
+    </Content>
   </ItemGroup>
   <ItemGroup>
     <Content Include="zips\winzip-sfx.exe">
diff --git a/src/Zip Tests/zips/relative-paths-in-subdir-outside.zip b/src/Zip Tests/zips/relative-paths-in-subdir-outside.zip
new file mode 100644
index 0000000000000000000000000000000000000000..c388e06b1e744ac56feca97826832ecae19f7813
GIT binary patch
literal 547
zcmWIWW@h1H0D=Au{XYEp{-1?`Y!K#PkYPyA&ri`SsVE5z;bdU8U359BLG@ZxX$3a}
zBg;2N1_l-ppt_Qb%wh!~N>l);R>;pw<q7~A3X)=Am<lvB!LiyB!~@}0AWlq*NluB;
z)1x;ENzE;YNiECF0r?2->O2LI5Y*X>OmfV)LPG-RbOr{XuNjs!f>?;KVTFVZTDSyw
nGct)V;|>Op86dEvF%(D+ia-hQW@Q68i3tc9fj;E{`IZ3yWQBWt

literal 0
HcmV?d00001

diff --git a/src/Zip Tests/zips/relative-paths-in-subdir.zip b/src/Zip Tests/zips/relative-paths-in-subdir.zip
new file mode 100644
index 0000000000000000000000000000000000000000..d112ca972bc38eb758f9edd018747a028a88108d
GIT binary patch
literal 547
zcmWIWW@h1H0D=Au{XYEp{-1?`Y!K#PkYPyA&ri`SsVE5z;bdU8U359BLG@ZxX$3a}
zBg;2N1_l-ppt_Qb%wh!~N>l);R>;pw<q7~A3X)=Am<lvB!LiyB!~@}0AWlq*NluAL
zO^eafgCeXVKv|$T70Hm)+=7_YvdkQikKnG(QveA;oz2K3$BZj9B!Et5U;z4>VM!y1
zg$Nr~NZ6o-OMo{clL#~JU;vo`0!tc0fh2u`05d>Q0wutkl?~)1CLm-4`jiLcTLu7@
CCyEpR

literal 0
HcmV?d00001

diff --git a/src/Zip Tests/zips/relative-paths-outside.zip b/src/Zip Tests/zips/relative-paths-outside.zip
new file mode 100644
index 0000000000000000000000000000000000000000..3474c88bec74e6381fb9e1e598f98076c64f2d68
GIT binary patch
literal 547
zcmWIWW@h1H0D=Au{XYEp{-1?`Y!K#PkYPyA&ri`SsVE5z;bdU8U359BLG@ZxX$3a}
zBg;2N1_l-ppt_Qb%wh!~N>l);R>;pw<q7~A3X)=Am<lvB!LiyB!~@}0AlB2184whb
znp+T)T9%mu@)6wCc?uvQsIwWF<d|`Vh6K>*3=BYDGc0KYu@GUy3JDvua0&2cWD;S<
n9Sk5dKwwE@D3BbG5CK|>5-0)QtZX1BF##bX(5E~g-!cFIhBtZG

literal 0
HcmV?d00001

diff --git a/src/Zip.Shared/Shared.cs b/src/Zip.Shared/Shared.cs
index 47b3e33..7e968a8 100644
--- a/src/Zip.Shared/Shared.cs
+++ b/src/Zip.Shared/Shared.cs
@@ -157,6 +157,46 @@ public static string NormalizePathForUseInZipFile(string pathName)
             return SimplifyFwdSlashPath(pathName);
         }
 
+        /// <summary>
+        /// Sanitize paths in zip files. This means making sure that relative paths in a zip file don't go outside
+        /// the top directory. Entries like something/../../../../Temp/evil.txt get sanitized to Temp/evil.txt
+        /// when extracting
+        /// </summary>
+        /// <param name="path">A path with forward slashes as directory separator</param>
+        /// <returns>sanitized path</returns>
+        public static string SanitizePath(string path)
+        {
+            System.Collections.Generic.List<string> dirs = new System.Collections.Generic.List<string>();
+            int level = 0;
+            foreach (string dir in path.Split('/'))
+            {
+                if (dir == "..")
+                {
+                    if (level == 0)
+                        continue;
+                    level--;
+                }
+                else
+                {
+                    if (dirs.Count - 1 < level)
+                        dirs.Add(dir);
+                    else
+                        dirs[level] = dir;
+                    level++;
+                }
+            }
+
+            path = "";
+            for (int i = 0; i < level; i++)
+            {
+                if (i > 0)
+                    path += "/";
+                path += dirs[i];
+            }
+
+            return path;
+        }
+
 
         //static System.Text.Encoding ibm437 = System.Text.Encoding.GetEncoding("IBM437");
         static System.Text.Encoding utf8 = System.Text.Encoding.GetEncoding("UTF-8");
diff --git a/src/Zip.Shared/ZipEntry.Extract.cs b/src/Zip.Shared/ZipEntry.Extract.cs
index 12a99e0..5c764c2 100644
--- a/src/Zip.Shared/ZipEntry.Extract.cs
+++ b/src/Zip.Shared/ZipEntry.Extract.cs
@@ -1422,6 +1422,8 @@ bool IsDoneWithOutputToBaseDir(string baseDir, out string outFileName)
             if (f.StartsWith("/"))
                 f = f.Substring(1);
 
+            f = SharedUtilities.SanitizePath(f);
+
             // String.Contains is not available on .NET CF 2.0
             outFileName = _container.ZipFile.FlattenFoldersOnExtract
                 ? Path.Combine(baseDir, f.IndexOf('/') != -1 ? Path.GetFileName(f) : f)
