From c24922e692a52121e853a84ead6b9337f4c08a94 Mon Sep 17 00:00:00 2001
From: Denis Ovsienko <denis@ovsienko.info>
Date: Tue, 19 Sep 2017 13:33:55 +0100
Subject: [PATCH] (for 4.9.3) CVE-2018-14466/Rx: fix an over-read bug

In rx_cache_insert() and rx_cache_find() properly read the serviceId
field of the rx_header structure as a 16-bit integer. When those
functions tried to read 32 bits the extra 16 bits could be outside of
the bounds checked in rx_print() for the rx_header structure, as
serviceId is the last field in that structure.

This fixes a buffer over-read discovered by Bhargava Shastry,
SecT/TU Berlin.

Add a test using the capture file supplied by the reporter(s).
---
 print-rx.c                   |   4 ++--
 tests/TESTLIST               |   1 +
 tests/rx_serviceid_oobr.out  |   3 +++
 tests/rx_serviceid_oobr.pcap | Bin 0 -> 2759 bytes
 4 files changed, 6 insertions(+), 2 deletions(-)
 create mode 100644 tests/rx_serviceid_oobr.out
 create mode 100644 tests/rx_serviceid_oobr.pcap

diff --git a/print-rx.c b/print-rx.c
index 0d3cd3759..bf2af0cb7 100644
--- a/print-rx.c
+++ b/print-rx.c
@@ -694,7 +694,7 @@ rx_cache_insert(netdissect_options *ndo,
 	UNALIGNED_MEMCPY(&rxent->client, &ip->ip_src, sizeof(uint32_t));
 	UNALIGNED_MEMCPY(&rxent->server, &ip->ip_dst, sizeof(uint32_t));
 	rxent->dport = dport;
-	rxent->serviceId = EXTRACT_32BITS(&rxh->serviceId);
+	rxent->serviceId = EXTRACT_16BITS(&rxh->serviceId);
 	rxent->opcode = EXTRACT_32BITS(bp + sizeof(struct rx_header));
 }
 
@@ -725,7 +725,7 @@ rx_cache_find(const struct rx_header *rxh, const struct ip *ip, int sport,
 		if (rxent->callnum == EXTRACT_32BITS(&rxh->callNumber) &&
 		    rxent->client.s_addr == clip &&
 		    rxent->server.s_addr == sip &&
-		    rxent->serviceId == EXTRACT_32BITS(&rxh->serviceId) &&
+		    rxent->serviceId == EXTRACT_16BITS(&rxh->serviceId) &&
 		    rxent->dport == sport) {
 
 			/* We got a match! */
diff --git a/tests/TESTLIST b/tests/TESTLIST
index e841424c8..ac7325a02 100644
--- a/tests/TESTLIST
+++ b/tests/TESTLIST
@@ -573,6 +573,7 @@ ikev1_id_ipv6_addr_subnet-oobr	ikev1_id_ipv6_addr_subnet-oobr.pcap	ikev1_id_ipv6
 isakmp-various-oobr	isakmp-various-oobr.pcap	isakmp-various-oobr.out	-v
 aoe-oobr-1		aoe-oobr-1.pcap			aoe-oobr-1.out	-v -c1
 frf16_magic_ie-oobr	frf16_magic_ie-oobr.pcap	frf16_magic_ie-oobr.out	-v -c1
+rx_serviceid_oobr	rx_serviceid_oobr.pcap		rx_serviceid_oobr.out -c3
 
 # bad packets from Katie Holly
 mlppp-oobr		mlppp-oobr.pcap			mlppp-oobr.out
diff --git a/tests/rx_serviceid_oobr.out b/tests/rx_serviceid_oobr.out
new file mode 100644
index 000000000..f2c0e2a40
--- /dev/null
+++ b/tests/rx_serviceid_oobr.out
@@ -0,0 +1,3 @@
+IP 250.15.128.19.68 > 249.251.157.8.63246: BOOTP/DHCP, unknown (0x00), length 8085
+[|ether]
+IP 0.0.0.0.0 > 0.0.0.0.7004:  rx abort (539)
diff --git a/tests/rx_serviceid_oobr.pcap b/tests/rx_serviceid_oobr.pcap
new file mode 100644
index 0000000000000000000000000000000000000000..8bc1a753da6a9775932f07a3f48bd1906c15a864
GIT binary patch
literal 2759
zcmca|c+)~A1{Q_}=1&X^j0z0y3_uEq1vwbl#Tc0we1U8;1|A^>9)<s3IT#rZEO@h?
zgTa;IzxrJM2MmmYeRaS18-#!Up3A}D@|{l}EEvsl<JK)+phgDf{|x{CH!uLr#{dQl
z|DPZU&iK#3pc)GlFk@g4XW;q$rkk;@{y@FL9FS!x8guy%FbE3v2_SSx$1o{#>|tPx
zW;p}1?1d~Y%YfP%{sV0Q`HZ*W9fJY`gFF_??m{d}V8?3NJ&<KLpiW>uj?J?F|NlQl
zI1x7sn@@ou2=Zw)x=&vrd<qX%m``Em;IwH5PzI(5Iar~Vkrb@#*la-xR&3JfVyJPB
z!*Scu<6Hu23?d}Ri*sxtF(~7l0pU}OI7b92DBnVX!2kbeAgOy>#Q!%yK`g18h&YE^
zhCAQFY=qJ1`4}jUEtsj9k7bbaG0d`btN=O9<B4epWezIkZdM%rhXy`I?j{h^D8(Qw
z$l)~Qxf_wru;!?dl)L>%D$&0JYZGJuONPh^j?6em7)y)lgg}BrSdNWFIKh1pAXH1I
yV5>M`mJy%e8bDeGX>|hkMT*AYYD-WQ`LH-brkP(Lc!U!Ng-tkwRX`SMDgpp=734ku

literal 0
HcmV?d00001

