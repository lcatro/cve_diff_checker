From e0c1398d54a9661c8c70267c3a925ba6b192142e Mon Sep 17 00:00:00 2001
From: Tom Scott <tscott@weblinc.com>
Date: Tue, 15 Aug 2017 11:07:07 -0400
Subject: [PATCH] Replace marshalling with pluggable serializers

This is in response to a vulnerability warning we received on Friday,
August 11th, 2017. While most users will not be affected by this
change, we recommend that developers of new applications use a different
serializer other than `Marshal`. This, along with the removal of the
`:marshalling` option, will enforce "sane defaults" in terms of securely
serializing/de-serializing data.

- Add `:serializer` option and deprecate `:marshalling`. Although you
  will still be able to enable/disable serialization with Marshal using
  `:marshalling` in the 1.x series, this will be removed by 2.0.

- Rename `Redis::Store::Marshalling` to `Redis::Store::Serialization` to
  reflect its new purpose.

Fixes #289
---
 lib/redis-store.rb                            | 12 ------
 lib/redis/store.rb                            | 28 ++++++++++++-
 lib/redis/store/factory.rb                    |  9 ++++-
 lib/redis/store/namespace.rb                  |  4 +-
 .../{marshalling.rb => serialization.rb}      |  6 +--
 test/redis/store/factory_test.rb              | 40 +++++++++++++++++--
 test/redis/store/namespace_test.rb            |  4 +-
 ...shalling_test.rb => serialization_test.rb} |  4 +-
 8 files changed, 80 insertions(+), 27 deletions(-)
 rename lib/redis/store/{marshalling.rb => serialization.rb} (90%)
 rename test/redis/store/{marshalling_test.rb => serialization_test.rb} (98%)

diff --git a/lib/redis-store.rb b/lib/redis-store.rb
index 5b33c29..a7de2c0 100644
--- a/lib/redis-store.rb
+++ b/lib/redis-store.rb
@@ -1,13 +1 @@
-require 'redis'
 require 'redis/store'
-require 'redis/store/factory'
-require 'redis/distributed_store'
-require 'redis/store/namespace'
-require 'redis/store/marshalling'
-require 'redis/store/version'
-require 'redis/store/redis_version'
-
-class Redis
-  class Store < self
-  end
-end
diff --git a/lib/redis/store.rb b/lib/redis/store.rb
index f7c6262..18088d7 100644
--- a/lib/redis/store.rb
+++ b/lib/redis/store.rb
@@ -1,3 +1,10 @@
+require 'redis'
+require 'redis/store/factory'
+require 'redis/distributed_store'
+require 'redis/store/namespace'
+require 'redis/store/serialization'
+require 'redis/store/version'
+require 'redis/store/redis_version'
 require 'redis/store/ttl'
 require 'redis/store/interface'
 require 'redis/store/redis_version'
@@ -8,6 +15,24 @@ class Store < self
 
     def initialize(options = { })
       super
+
+      unless options[:marshalling].nil?
+        puts %(
+          DEPRECATED: You are passing the :marshalling option, which has been
+          replaced with `serializer: Marshal` to support pluggable serialization
+          backends. To disable serialization (much like disabling marshalling),
+          pass `serializer: nil` in your configuration.
+
+          The :marshalling option will be removed for redis-store 2.0.
+        )
+      end
+
+      @serializer = options.key?(:serializer) ? options[:serializer] : Marshal
+
+      unless options[:marshalling].nil?
+        @serializer = options[:marshalling] ? Marshal : nil
+      end
+
       _extend_marshalling options
       _extend_namespace   options
     end
@@ -23,8 +48,7 @@ def to_s
 
     private
       def _extend_marshalling(options)
-        @marshalling = !(options[:marshalling] === false) # HACK - TODO delegate to Factory
-        extend Marshalling if @marshalling
+        extend Serialization unless @serializer.nil?
       end
 
       def _extend_namespace(options)
diff --git a/lib/redis/store/factory.rb b/lib/redis/store/factory.rb
index 598e210..9829f2d 100644
--- a/lib/redis/store/factory.rb
+++ b/lib/redis/store/factory.rb
@@ -50,7 +50,14 @@ def self.normalize_key_names(options)
         if options.key?(:key_prefix) && !options.key?(:namespace)
           options[:namespace] = options.delete(:key_prefix) # RailsSessionStore
         end
-        options[:raw] = !options[:marshalling]
+        options[:raw] = case
+                        when options.key?(:serializer)
+                          options[:serializer].nil?
+                        when options.key?(:marshalling)
+                          !options[:marshalling]
+                        else
+                          false
+                        end
         options
       end
 
diff --git a/lib/redis/store/namespace.rb b/lib/redis/store/namespace.rb
index 2eb3b40..99e41c8 100644
--- a/lib/redis/store/namespace.rb
+++ b/lib/redis/store/namespace.rb
@@ -46,8 +46,8 @@ def del(*keys)
       def mget(*keys)
         options = (keys.pop if keys.last.is_a? Hash) || {}
         if keys.any?
-          # Marshalling gets extended before Namespace does, so we need to pass options further
-          if singleton_class.ancestors.include? Marshalling
+          # Serialization gets extended before Namespace does, so we need to pass options further
+          if singleton_class.ancestors.include? Serialization
             super(*keys.map {|key| interpolate(key) }, options)
           else
             super(*keys.map {|key| interpolate(key) })
diff --git a/lib/redis/store/marshalling.rb b/lib/redis/store/serialization.rb
similarity index 90%
rename from lib/redis/store/marshalling.rb
rename to lib/redis/store/serialization.rb
index c2e51e4..0838d15 100644
--- a/lib/redis/store/marshalling.rb
+++ b/lib/redis/store/serialization.rb
@@ -1,6 +1,6 @@
 class Redis
   class Store < self
-    module Marshalling
+    module Serialization
       def set(key, value, options = nil)
         _marshal(value, options) { |v| super encode(key), encode(v), options }
       end
@@ -36,11 +36,11 @@ def mset(*args)
 
       private
         def _marshal(val, options)
-          yield marshal?(options) ? Marshal.dump(val) : val
+          yield marshal?(options) ? @serializer.dump(val) : val
         end
 
         def _unmarshal(val, options)
-          unmarshal?(val, options) ? Marshal.load(val) : val
+          unmarshal?(val, options) ? @serializer.load(val) : val
         end
 
         def marshal?(options)
diff --git a/test/redis/store/factory_test.rb b/test/redis/store/factory_test.rb
index 74cd7af..73a6691 100644
--- a/test/redis/store/factory_test.rb
+++ b/test/redis/store/factory_test.rb
@@ -1,4 +1,5 @@
 require 'test_helper'
+require 'json'
 
 describe "Redis::Store::Factory" do
   describe ".create" do
@@ -51,12 +52,45 @@
         assert_nil(store.instance_variable_get(:@client).password)
       end
 
-      it "allows/disable marshalling" do
-        store = Redis::Store::Factory.create :marshalling => false
-        store.instance_variable_get(:@marshalling).must_equal(false)
+      it "disables serialization" do
+        store = Redis::Store::Factory.create :serializer => nil
+        store.instance_variable_get(:@serializer).must_be_nil
         store.instance_variable_get(:@options)[:raw].must_equal(true)
       end
 
+      it "configures pluggable serialization backend" do
+        store = Redis::Store::Factory.create :serializer => JSON
+        store.instance_variable_get(:@serializer).must_equal(JSON)
+        store.instance_variable_get(:@options)[:raw].must_equal(false)
+      end
+
+      describe 'with stdout disabled' do
+        before do
+          @original_stderr = $stderr
+          @original_stdout = $stdout
+
+          $stderr = Tempfile.new('stderr')
+          $stdout = Tempfile.new('stdout')
+        end
+
+        it "disables marshalling and provides deprecation warning" do
+          store = Redis::Store::Factory.create :marshalling => false
+          store.instance_variable_get(:@serializer).must_be_nil
+          store.instance_variable_get(:@options)[:raw].must_equal(true)
+        end
+
+        it "enables marshalling but provides warning to use :serializer instead" do
+          store = Redis::Store::Factory.create :marshalling => true
+          store.instance_variable_get(:@serializer).must_equal(Marshal)
+          store.instance_variable_get(:@options)[:raw].must_equal(false)
+        end
+
+        after do
+          $stderr = @original_stderr
+          $stdout = @original_stdout
+        end
+      end
+
       it "should instantiate a Redis::DistributedStore store" do
         store = Redis::Store::Factory.create(
           {:host => "localhost", :port => 6379},
diff --git a/test/redis/store/namespace_test.rb b/test/redis/store/namespace_test.rb
index ac991f7..eac7ad1 100644
--- a/test/redis/store/namespace_test.rb
+++ b/test/redis/store/namespace_test.rb
@@ -3,7 +3,7 @@
 describe "Redis::Store::Namespace" do
   def setup
     @namespace = "theplaylist"
-    @store  = Redis::Store.new :namespace => @namespace, :marshalling => false # TODO remove mashalling option
+    @store  = Redis::Store.new :namespace => @namespace, :serializer => nil
     @client = @store.instance_variable_get(:@client)
     @rabbit = "bunny"
     @default_store = Redis::Store.new
@@ -90,7 +90,7 @@ def teardown
   end
 
   describe 'method calls' do
-    let(:store){Redis::Store.new :namespace => @namespace, :marshalling => false}
+    let(:store){Redis::Store.new :namespace => @namespace, :serializer => nil}
     let(:client){store.instance_variable_get(:@client)}
 
     it "should namespace get" do
diff --git a/test/redis/store/marshalling_test.rb b/test/redis/store/serialization_test.rb
similarity index 98%
rename from test/redis/store/marshalling_test.rb
rename to test/redis/store/serialization_test.rb
index b4e49b1..9dac9eb 100644
--- a/test/redis/store/marshalling_test.rb
+++ b/test/redis/store/serialization_test.rb
@@ -1,8 +1,8 @@
 require 'test_helper'
 
-describe "Redis::Marshalling" do
+describe "Redis::Serialization" do
   def setup
-    @store = Redis::Store.new :marshalling => true
+    @store = Redis::Store.new serializer: Marshal
     @rabbit = OpenStruct.new :name => "bunny"
     @white_rabbit = OpenStruct.new :color => "white"
     @store.set "rabbit", @rabbit
