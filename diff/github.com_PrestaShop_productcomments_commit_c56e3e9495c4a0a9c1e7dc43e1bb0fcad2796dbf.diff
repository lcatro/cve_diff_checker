From 15a0e4577f22d87fbd9b500554f38d3377760d99 Mon Sep 17 00:00:00 2001
From: Pierre RAMBAUD <pierre.rambaud86@gmail.com>
Date: Fri, 13 Nov 2020 16:42:35 +0100
Subject: [PATCH 1/2] Make sure ajax is sent in application/json format

---
 controllers/front/CommentGrade.php            | 12 ++-
 controllers/front/ListComments.php            |  7 +-
 controllers/front/PostComment.php             | 77 ++++++++++++-------
 controllers/front/ReportComment.php           | 51 ++++++++----
 controllers/front/UpdateCommentUsefulness.php | 69 +++++++++++------
 5 files changed, 146 insertions(+), 70 deletions(-)

diff --git a/controllers/front/CommentGrade.php b/controllers/front/CommentGrade.php
index 3c6d904..1731ce3 100644
--- a/controllers/front/CommentGrade.php
+++ b/controllers/front/CommentGrade.php
@@ -32,6 +32,8 @@ public function display()
         $idProducts = Tools::getValue('id_products');
         /** @var ProductCommentRepository $productCommentRepository */
 
+        header('Content-Type: application/json');
+
         if (!is_array($idProducts)) {
             return $this->ajaxRender(null);
         }
@@ -51,8 +53,12 @@ public function display()
             ];
         }
 
-        $this->ajaxRender(json_encode([
-            'products' => $resultFormated
-        ]));
+        $this->ajaxRender(
+            json_encode(
+                [
+                    'products' => $resultFormated
+                ]
+            )
+        );
     }
 }
diff --git a/controllers/front/ListComments.php b/controllers/front/ListComments.php
index 2d64dc0..749eadf 100644
--- a/controllers/front/ListComments.php
+++ b/controllers/front/ListComments.php
@@ -75,6 +75,11 @@ public function display()
             $responseArray['comments'][] = $productComment;
         }
 
-        $this->ajaxRender(json_encode($responseArray));
+        header('Content-Type: application/json');
+        $this->ajaxRender(
+            json_encode(
+                $responseArray
+            )
+        );
     }
 }
diff --git a/controllers/front/PostComment.php b/controllers/front/PostComment.php
index 31d8e57..103f4de 100644
--- a/controllers/front/PostComment.php
+++ b/controllers/front/PostComment.php
@@ -33,20 +33,25 @@ class ProductCommentsPostCommentModuleFrontController extends ModuleFrontControl
 {
     public function display()
     {
+        header('Content-Type: application/json');
         if (!(int) $this->context->cookie->id_customer && !Configuration::get('PRODUCT_COMMENTS_ALLOW_GUESTS')) {
-            $this->ajaxRender(json_encode([
-                'success' => false,
-                'error' => $this->trans(
-                    'You need to be [1]logged in[/1] or [2]create an account[/2] to post your review.',
+            $this->ajaxRender(
+                json_encode(
                     [
-                        '[1]' => '<a href="' . $this->context->link->getPageLink('my-account') . '">',
-                        '[/1]' => '</a>',
-                        '[2]' => '<a href="' . $this->context->link->getPageLink('authentication&create_account=1') . '">',
-                        '[/2]' => '</a>',
-                    ],
-                    'Modules.Productcomments.Shop'
-                ),
-            ]));
+                        'success' => false,
+                        'error' => $this->trans(
+                            'You need to be [1]logged in[/1] or [2]create an account[/2] to post your review.',
+                            [
+                                '[1]' => '<a href="' . $this->context->link->getPageLink('my-account') . '">',
+                                '[/1]' => '</a>',
+                                '[2]' => '<a href="' . $this->context->link->getPageLink('authentication&create_account=1') . '">',
+                                '[/2]' => '</a>',
+                            ],
+                            'Modules.Productcomments.Shop'
+                        ),
+                    ]
+                )
+            );
 
             return false;
         }
@@ -59,12 +64,20 @@ public function display()
 
         /** @var ProductCommentRepository $productCommentRepository */
         $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');
-        $isPostAllowed = $productCommentRepository->isPostAllowed($id_product, (int) $this->context->cookie->id_customer, (int) $this->context->cookie->id_guest);
+        $isPostAllowed = $productCommentRepository->isPostAllowed(
+            $id_product,
+            (int) $this->context->cookie->id_customer,
+            (int) $this->context->cookie->id_guest
+        );
         if (!$isPostAllowed) {
-            $this->ajaxRender(json_encode([
-                'success' => false,
-                'error' => $this->trans('You are not allowed to post a review at the moment, please try again later.', [], 'Modules.Productcomments.Shop'),
-            ]));
+            $this->ajaxRender(
+                json_encode(
+                    [
+                        'success' => false,
+                        'error' => $this->trans('You are not allowed to post a review at the moment, please try again later.', [], 'Modules.Productcomments.Shop'),
+                    ]
+                )
+            );
 
             return false;
         }
@@ -87,21 +100,30 @@ public function display()
         $this->addCommentGrades($productComment, $criterions);
 
         //Validate comment
-        if (!empty($errors = $this->validateComment($productComment))) {
-            $this->ajaxRender(json_encode([
-                'success' => false,
-                'errors' => $errors,
-            ]));
+        $errors = $this->validateComment($productComment);
+        if (!empty($errors)) {
+            $this->ajaxRender(
+                json_encode(
+                    [
+                        'success' => false,
+                        'errors' => $errors,
+                    ]
+                )
+            );
 
             return false;
         }
 
         $entityManager->flush();
 
-        $this->ajaxRender(json_encode([
-            'success' => true,
-            'product_comment' => $productComment->toArray(),
-        ]));
+        $this->ajaxRender(
+            json_encode(
+                [
+                    'success' => true,
+                    'product_comment' => $productComment->toArray(),
+                ]
+            )
+        );
     }
 
     /**
@@ -116,6 +138,7 @@ private function addCommentGrades(ProductComment $productComment, array $criteri
         $entityManager = $this->container->get('doctrine.orm.entity_manager');
         $criterionRepository = $entityManager->getRepository(ProductCommentCriterion::class);
         $averageGrade = 0;
+
         foreach ($criterions as $criterionId => $grade) {
             $criterion = $criterionRepository->findOneById($criterionId);
             $criterionGrade = new ProductCommentGrade(
@@ -123,9 +146,11 @@ private function addCommentGrades(ProductComment $productComment, array $criteri
                 $criterion,
                 $grade
             );
+
             $entityManager->persist($criterionGrade);
             $averageGrade += $grade;
         }
+
         $averageGrade /= count($criterions);
         $productComment->setGrade($averageGrade);
     }
diff --git a/controllers/front/ReportComment.php b/controllers/front/ReportComment.php
index d06fa0f..a3715ed 100644
--- a/controllers/front/ReportComment.php
+++ b/controllers/front/ReportComment.php
@@ -31,12 +31,18 @@ class ProductCommentsReportCommentModuleFrontController extends ModuleFrontContr
 {
     public function display()
     {
+        header('Content-Type: application/json');
+
         $customerId = (int) $this->context->cookie->id_customer;
         if (!$customerId) {
-            $this->ajaxRender(json_encode([
-                'success' => false,
-                'error' => $this->trans('You need to be logged in to report a review.', [], 'Modules.Productcomments.Shop'),
-            ]));
+            $this->ajaxRender(
+                json_encode(
+                    [
+                        'success' => false,
+                        'error' => $this->trans('You need to be logged in to report a review.', [], 'Modules.Productcomments.Shop'),
+                    ]
+                )
+            );
 
             return false;
         }
@@ -49,10 +55,14 @@ public function display()
 
         $productComment = $productCommentEntityRepository->findOneById($id_product_comment);
         if (!$productComment) {
-            $this->ajaxRender(json_encode([
-                'success' => false,
-                'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),
-            ]));
+            $this->ajaxRender(
+                json_encode(
+                    [
+                        'success' => false,
+                        'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),
+                    ]
+                )
+            );
 
             return false;
         }
@@ -63,11 +73,16 @@ public function display()
             'comment' => $id_product_comment,
             'customerId' => $customerId,
         ]);
+
         if ($productCommentAbuse) {
-            $this->ajaxRender(json_encode([
-                'success' => false,
-                'error' => $this->trans('You already reported this review as abusive.', [], 'Modules.Productcomments.Shop'),
-            ]));
+            $this->ajaxRender(
+                json_encode(
+                    [
+                        'success' => false,
+                        'error' => $this->trans('You already reported this review as abusive.', [], 'Modules.Productcomments.Shop'),
+                    ]
+                )
+            );
 
             return false;
         }
@@ -79,9 +94,13 @@ public function display()
         $entityManager->persist($productCommentAbuse);
         $entityManager->flush();
 
-        $this->ajaxRender(json_encode([
-            'success' => true,
-            'id_product_comment' => $id_product_comment,
-        ]));
+        $this->ajaxRender(
+            json_encode(
+                [
+                    'success' => true,
+                    'id_product_comment' => $id_product_comment,
+                ]
+            )
+        );
     }
 }
diff --git a/controllers/front/UpdateCommentUsefulness.php b/controllers/front/UpdateCommentUsefulness.php
index 30bec6a..6c5f5dd 100644
--- a/controllers/front/UpdateCommentUsefulness.php
+++ b/controllers/front/UpdateCommentUsefulness.php
@@ -32,30 +32,40 @@ class ProductCommentsUpdateCommentUsefulnessModuleFrontController extends Module
 {
     public function display()
     {
+        header('Content-Type: application/json');
+
         if (!Configuration::get('PRODUCT_COMMENTS_USEFULNESS')) {
-            $this->ajaxRender(json_encode([
-                'success' => false,
-                'error' => $this->trans('This feature is not enabled.', [], 'Modules.Productcomments.Shop'),
-            ]));
+            $this->ajaxRender(
+                json_encode(
+                    [
+                        'success' => false,
+                        'error' => $this->trans('This feature is not enabled.', [], 'Modules.Productcomments.Shop'),
+                    ]
+                )
+            );
 
             return false;
         }
 
         $customerId = (int) $this->context->cookie->id_customer;
         if (!$customerId) {
-            $this->ajaxRender(json_encode([
-                'success' => false,
-                'error' => $this->trans(
-                    'You need to be [1]logged in[/1] or [2]create an account[/2] to give your appreciation of a review.',
+            $this->ajaxRender(
+                json_encode(
                     [
-                        '[1]' => '<a href="' . $this->context->link->getPageLink('my-account') . '">',
-                        '[/1]' => '</a>',
-                        '[2]' => '<a href="' . $this->context->link->getPageLink('authentication&create_account=1') . '">',
-                        '[/2]' => '</a>',
-                    ],
-                    'Modules.Productcomments.Shop'
-                ),
-            ]));
+                        'success' => false,
+                        'error' => $this->trans(
+                            'You need to be [1]logged in[/1] or [2]create an account[/2] to give your appreciation of a review.',
+                            [
+                                '[1]' => '<a href="' . $this->context->link->getPageLink('my-account') . '">',
+                                '[/1]' => '</a>',
+                                '[2]' => '<a href="' . $this->context->link->getPageLink('authentication&create_account=1') . '">',
+                                '[/2]' => '</a>',
+                            ],
+                            'Modules.Productcomments.Shop'
+                        ),
+                    ]
+                )
+            );
 
             return false;
         }
@@ -69,10 +79,14 @@ public function display()
 
         $productComment = $productCommentEntityRepository->findOneById($id_product_comment);
         if (!$productComment) {
-            $this->ajaxRender(json_encode([
-                'success' => false,
-                'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),
-            ]));
+            $this->ajaxRender(
+                json_encode(
+                    [
+                        'success' => false,
+                        'error' => $this->trans('Cannot find the requested product review.', [], 'Modules.Productcomments.Shop'),
+                    ]
+                )
+            );
 
             return false;
         }
@@ -100,9 +114,16 @@ public function display()
         $productCommentRepository = $this->context->controller->getContainer()->get('product_comment_repository');
         $commentUsefulness = $productCommentRepository->getProductCommentUsefulness($id_product_comment);
 
-        $this->ajaxRender(json_encode(array_merge([
-            'success' => true,
-            'id_product_comment' => $id_product_comment,
-        ], $commentUsefulness)));
+        $this->ajaxRender(
+            json_encode(
+                array_merge(
+                    [
+                        'success' => true,
+                        'id_product_comment' => $id_product_comment,
+                    ],
+                    $commentUsefulness
+                )
+            )
+        );
     }
 }

From 9e019037c49e1288ddeb54783d56ffd14e7ec4ac Mon Sep 17 00:00:00 2001
From: Pierre RAMBAUD <pierre.rambaud86@gmail.com>
Date: Fri, 13 Nov 2020 17:53:55 +0100
Subject: [PATCH 2/2] Update javascript to use json instead of html

---
 views/js/list-comments.js          | 18 +++---------------
 views/js/post-comment.js           |  7 +------
 views/js/productListingComments.js | 16 ++++------------
 3 files changed, 8 insertions(+), 33 deletions(-)

diff --git a/views/js/list-comments.js b/views/js/list-comments.js
index 78c754e..76cda09 100644
--- a/views/js/list-comments.js
+++ b/views/js/list-comments.js
@@ -56,9 +56,7 @@ jQuery(document).ready(function () {
   }
 
   function paginateComments(page) {
-    $.get(commentsListUrl, {page: page}, function(result) {
-      const jsonResponse = JSON.parse(result);
-
+    $.get(commentsListUrl, {page: page}, function(jsonResponse) {
       if (jsonResponse.comments && jsonResponse.comments.length > 0) {
         populateComments(jsonResponse.comments);
         if (jsonResponse.comments_nb > jsonResponse.comments_per_page) {
@@ -123,12 +121,7 @@ jQuery(document).ready(function () {
   }
 
   function updateCommentUsefulness($comment, commentId, usefulness) {
-    $.post(updateCommentUsefulnessUrl, {id_product_comment: commentId, usefulness: usefulness}, function(jsonResponse){
-      var jsonData = false;
-      try {
-        jsonData = JSON.parse(jsonResponse);
-      } catch (e) {
-      }
+    $.post(updateCommentUsefulnessUrl, {id_product_comment: commentId, usefulness: usefulness}, function(jsonData){
       if (jsonData) {
         if (jsonData.success) {
           $('.useful-review-value', $comment).html(jsonData.usefulness);
@@ -151,12 +144,7 @@ jQuery(document).ready(function () {
       if (!confirm) {
         return;
       }
-      $.post(reportCommentUrl, {id_product_comment: commentId}, function(jsonResponse){
-        var jsonData = false;
-        try {
-          jsonData = JSON.parse(jsonResponse);
-        } catch (e) {
-        }
+      $.post(reportCommentUrl, {id_product_comment: commentId}, function(jsonData){
         if (jsonData) {
           if (jsonData.success) {
             reportCommentPostedModal.modal('show');
diff --git a/views/js/post-comment.js b/views/js/post-comment.js
index 96bd343..5e8ce02 100644
--- a/views/js/post-comment.js
+++ b/views/js/post-comment.js
@@ -84,12 +84,7 @@ jQuery(document).ready(function () {
     if (!validateFormData(formData)) {
       return;
     }
-    $.post($(this).attr('action'), $(this).serialize(), function(jsonResponse) {
-      var jsonData = false;
-      try {
-        jsonData = JSON.parse(jsonResponse);
-      } catch (e) {
-      }
+    $.post($(this).attr('action'), $(this).serialize(), function(jsonData) {
       if (jsonData) {
         if (jsonData.success) {
           clearPostCommentForm();
diff --git a/views/js/productListingComments.js b/views/js/productListingComments.js
index 86456ae..91d3668 100644
--- a/views/js/productListingComments.js
+++ b/views/js/productListingComments.js
@@ -86,7 +86,7 @@ var productListingComments = (function () {
             seenIds[id] = true;
         });
 
-        
+
         var IDsArray = Object.keys(seenIds);
         var prevDataIDs = data.productIDs.splice(0);
         data.productIDs = prevDataIDs.concat(IDsArray);
@@ -97,24 +97,17 @@ var productListingComments = (function () {
     }
 
     function loadProductsData() {
-        if (data.productIDs.length === 0) 
+        if (data.productIDs.length === 0)
             return;
 
         data.commentsLoadingInProgress = true;
 
         var dataIDsCopy = data.productIDs.slice(0);
             selectedProductIDs = dataIDsCopy.splice(0, data.ajaxIDsLimit);
-        
 
-        $.get(data.ajaxUrl, { id_products: selectedProductIDs }, function (jsonResponse) {
-            var jsonData = false;
-            try {
-                jsonData = JSON.parse(jsonResponse);
-            } catch (e) {
-            }
 
+        $.get(data.ajaxUrl, { id_products: selectedProductIDs }, function (jsonData) {
             if (jsonData) {
-
                 $.each(jsonData.products, function(i, elem) {
                     var productData = elem;
                     var $productsReviewsContainer = $('.product-list-reviews[data-id="' + productData.id_product + '"]');
@@ -126,7 +119,7 @@ var productListingComments = (function () {
                             $self.find(DOMStrings.productListReviewsStarsContainer).rating({ grade: productData.average_grade, starWidth: 16 });
                             $self.find(DOMStrings.productListReviewsNumberOfComments).text('(' + productData.comments_nb + ')');
                             $self.closest(DOMStrings.productContainer).addClass(DOMClasses.hasReviews);
-                            $self.css('visibility', 'visible');                            
+                            $self.css('visibility', 'visible');
                         }
 
                         $self.closest(DOMStrings.productContainer).addClass(DOMClasses.reviewsLoaded);
@@ -156,4 +149,3 @@ var productListingComments = (function () {
         }
     }
 })();
-
