From d86e185e485b6330216dee8e854455c694e3a36e Mon Sep 17 00:00:00 2001
From: Riley Dulin <dulinr@fb.com>
Date: Fri, 14 Aug 2020 15:37:38 -0700
Subject: [PATCH] Fix a bug in transient object property assignment and
 getUTF16Ref

Summary:
The returned `UTF16Ref` from `StringView::getUTF16Ref` can be invalidated by
appending more contents to the same allocator.
This case was encountered in `transientObjectPutErrorMessage`, resulting in
using free'd memory.

Reviewed By: tmikov

Differential Revision: D23034855

fbshipit-source-id: 4c25a5369934bf3bdfc5582385503f4b87de3792
---
 include/hermes/VM/StringView.h | 4 ++--
 lib/VM/Interpreter.cpp         | 7 ++++---
 2 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/include/hermes/VM/StringView.h b/include/hermes/VM/StringView.h
index d15f848ca..a5170b828 100644
--- a/include/hermes/VM/StringView.h
+++ b/include/hermes/VM/StringView.h
@@ -319,9 +319,9 @@ class StringView {
   /// If the string is already UTF16, we return the pointer directly;
   /// otherwise (it's ASCII) we copy the string into the end of \p allocator,
   /// and \return a pointer to the beginning of this string in the allocator.
-  /// Note: \p allocator does not need to be empty when passed in. We always
-  /// append.
+  /// \pre allocator must be empty when passed in.
   UTF16Ref getUTF16Ref(llvh::SmallVectorImpl<char16_t> &allocator) const {
+    assert(allocator.empty() && "Shouldn't use a non-empty allocator");
     return getUTF16Ref(allocator, false);
   }
 
diff --git a/lib/VM/Interpreter.cpp b/lib/VM/Interpreter.cpp
index 9fc0eebd5..cf8a7b8db 100644
--- a/lib/VM/Interpreter.cpp
+++ b/lib/VM/Interpreter.cpp
@@ -445,11 +445,12 @@ transientObjectPutErrorMessage(Runtime *runtime, Handle<> base, SymbolID id) {
   StringView valueAsStringPrintable =
       StringPrimitive::createStringView(runtime, valueAsString);
 
-  SmallU16String<32> tmp;
+  SmallU16String<32> tmp1;
+  SmallU16String<32> tmp2;
   return runtime->raiseTypeError(
       TwineChar16("Cannot create property '") + propName + "' on " +
-      baseTypeAsString.getUTF16Ref(tmp) + " '" +
-      valueAsStringPrintable.getUTF16Ref(tmp) + "'");
+      baseTypeAsString.getUTF16Ref(tmp1) + " '" +
+      valueAsStringPrintable.getUTF16Ref(tmp2) + "'");
 }
 
 ExecutionStatus Interpreter::putByIdTransient_RJS(
