From c04008db916dc07796113f13a44f39c24a3ee85c Mon Sep 17 00:00:00 2001
From: Pierre RAMBAUD <pierre.rambaud@prestashop.com>
Date: Wed, 3 Feb 2021 16:36:30 +0100
Subject: [PATCH 1/3] Escape characters durgin module csv export

---
 classes/module/ModuleGraph.php         | 41 +++++++++++---
 tests/Unit/Classes/ModuleGraphTest.php | 75 ++++++++++++++++++++++++++
 2 files changed, 109 insertions(+), 7 deletions(-)
 create mode 100644 tests/Unit/Classes/ModuleGraphTest.php

diff --git a/classes/module/ModuleGraph.php b/classes/module/ModuleGraph.php
index ff9b0bf78815..f50a099cf518 100644
--- a/classes/module/ModuleGraph.php
+++ b/classes/module/ModuleGraph.php
@@ -89,10 +89,12 @@ protected function setDateGraph($layers, $legend = false)
                     for ($i = $from_array['mday']; $i <= $imax; ++$i) {
                         $days[] = $i;
                     }
+
                     for ($i = 1; $i <= $to_array['mday']; ++$i) {
                         $days[] = $i;
                     }
                 }
+
                 foreach ($days as $i) {
                     if ($layers == 1) {
                         $this->_values[$i] = 0;
@@ -101,9 +103,11 @@ protected function setDateGraph($layers, $legend = false)
                             $this->_values[$j][$i] = 0;
                         }
                     }
+
                     $this->_legend[$i] = ($i % 2) ? '' : sprintf('%02d', $i);
                 }
             }
+
             if (is_callable([$this, 'setMonthValues'])) {
                 $this->setMonthValues($layers);
             }
@@ -146,6 +150,7 @@ protected function setDateGraph($layers, $legend = false)
                 for ($i = $from_array['year']; $i <= $to_array['year']; ++$i) {
                     $years[] = $i;
                 }
+
                 foreach ($years as $i) {
                     if ($layers == 1) {
                         $this->_values[$i] = 0;
@@ -157,6 +162,7 @@ protected function setDateGraph($layers, $legend = false)
                     $this->_legend[$i] = sprintf('%04d', $i);
                 }
             }
+
             if (is_callable([$this, 'setAllTimeValues'])) {
                 $this->setAllTimeValues($layers);
             }
@@ -174,6 +180,7 @@ protected function csvExport($datas)
         if (isset($datas['option'])) {
             $this->setOption($datas['option'], $layers);
         }
+
         $this->getData($layers);
 
         // @todo use native CSV PHP functions ?
@@ -184,15 +191,17 @@ protected function csvExport($datas)
                     $this->_csv .= ';';
                 }
                 if (isset($this->_titles['main'][$i])) {
-                    $this->_csv .= $this->_titles['main'][$i];
+                    $this->_csv .= $this->escapeCell($this->_titles['main'][$i]);
                 }
             }
         } else { // If there is only one column title, there is in fast two column (the first without title)
-            $this->_csv .= ';' . $this->_titles['main'];
+            $this->_csv .= ';' . $this->escapeCell($this->_titles['main']);
         }
+
         $this->_csv .= "\n";
         if (count($this->_legend)) {
             $total = 0;
+
             if ($datas['type'] == 'pie') {
                 foreach ($this->_legend as $key => $legend) {
                     for ($i = 0, $total_main = (is_array($this->_titles['main']) ? count($this->_values) : 1); $i < $total_main; ++$i) {
@@ -200,8 +209,9 @@ protected function csvExport($datas)
                     }
                 }
             }
+
             foreach ($this->_legend as $key => $legend) {
-                $this->_csv .= $legend . ';';
+                $this->_csv .= $this->escapeCell($legend) . ';';
                 for ($i = 0, $total_main = (is_array($this->_titles['main']) ? count($this->_values) : 1); $i < $total_main; ++$i) {
                     if (!isset($this->_values[$i]) || !is_array($this->_values[$i])) {
                         if (isset($this->_values[$key])) {
@@ -209,7 +219,7 @@ protected function csvExport($datas)
                             if (is_numeric($this->_values[$key])) {
                                 $this->_csv .= $this->_values[$key] / (($datas['type'] == 'pie') ? $total : 1);
                             } else {
-                                $this->_csv .= $this->_values[$key];
+                                $this->_csv .= $this->escapeCell($this->_values[$key]);
                             }
                         } else {
                             $this->_csv .= '0';
@@ -219,7 +229,7 @@ protected function csvExport($datas)
                         if (is_numeric($this->_values[$i][$key])) {
                             $this->_csv .= $this->_values[$i][$key] / (($datas['type'] == 'pie') ? $total : 1);
                         } else {
-                            $this->_csv .= $this->_values[$i][$key];
+                            $this->_csv .= $this->escapeCell($this->_values[$i][$key]);
                         }
                     }
                     $this->_csv .= ';';
@@ -227,6 +237,7 @@ protected function csvExport($datas)
                 $this->_csv .= "\n";
             }
         }
+
         $this->_displayCsv();
     }
 
@@ -342,12 +353,12 @@ protected static function getEmployee($employee = null, Context $context = null)
 
     public function getDate()
     {
-        return ModuleGraph::getDateBetween($this->_employee);
+        return static::getDateBetween($this->_employee);
     }
 
     public static function getDateBetween($employee = null)
     {
-        if ($employee = ModuleGraph::getEmployee($employee)) {
+        if ($employee = static::getEmployee($employee)) {
             return ' \'' . pSQL($employee->stats_date_from) . ' 00:00:00\' AND \'' . pSQL($employee->stats_date_to) . ' 23:59:59\' ';
         }
 
@@ -358,4 +369,20 @@ public function getLang()
     {
         return $this->_id_lang;
     }
+
+    /**
+     * Escape cell content
+     *
+     * @param string $content
+     *
+     * @return string
+     */
+    public function escapeCell(string $content): string
+    {
+        if (preg_match('~^[=+\-@]~', $content)) {
+            return '\'' . $content;
+        }
+
+        return $content;
+    }
 }
diff --git a/tests/Unit/Classes/ModuleGraphTest.php b/tests/Unit/Classes/ModuleGraphTest.php
new file mode 100644
index 000000000000..96a1a8db80a8
--- /dev/null
+++ b/tests/Unit/Classes/ModuleGraphTest.php
@@ -0,0 +1,75 @@
+<?php
+/**
+ * Copyright since 2007 PrestaShop SA and Contributors
+ * PrestaShop is an International Registered Trademark & Property of PrestaShop SA
+ *
+ * NOTICE OF LICENSE
+ *
+ * This source file is subject to the Open Software License (OSL 3.0)
+ * that is bundled with this package in the file LICENSE.md.
+ * It is also available through the world-wide-web at this URL:
+ * https://opensource.org/licenses/OSL-3.0
+ * If you did not receive a copy of the license and are unable to
+ * obtain it through the world-wide-web, please send an email
+ * to license@prestashop.com so we can send you a copy immediately.
+ *
+ * DISCLAIMER
+ *
+ * Do not edit or add to this file if you wish to upgrade PrestaShop to newer
+ * versions in the future. If you wish to customize PrestaShop for your
+ * needs please refer to https://devdocs.prestashop.com/ for more information.
+ *
+ * @author    PrestaShop SA and Contributors <contact@prestashop.com>
+ * @copyright Since 2007 PrestaShop SA and Contributors
+ * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)
+ */
+
+namespace Tests\Unit\Classes;
+
+use Error;
+use ModuleGraph;
+use PHPUnit\Framework\TestCase;
+
+class ModuleGraphTest extends TestCase
+{
+    public static $data;
+
+    protected function setUp()
+    {
+        $this->object = new class() extends ModuleGraph {
+            public function getData($layers)
+            {
+                return ModuleGraphTest::$data;
+            }
+        };
+    }
+
+    public function testDrawWithoutInitialization()
+    {
+        $this->expectException(Error::class);
+        $this->object->draw();
+    }
+
+    /**
+     * @dataProvider getEscapeCellValues
+     */
+    public function testEscapeCell($base, $expected)
+    {
+        $this->assertEquals(
+            $this->object->escapeCell($base),
+            $expected
+        );
+    }
+
+    public function getEscapeCellValues()
+    {
+        return [
+            ['=CMD', '\'=CMD'],
+            ['@here', '\'@here'],
+            ['+something', '\'+something'],
+            ['-thing', '\'-thing'],
+            ['hello world', 'hello world'],
+            ['=@+-', '\'=@+-'],
+        ];
+    }
+}

From d5dce97f12f0bb014184a80f873b874fe00af81d Mon Sep 17 00:00:00 2001
From: Pierre RAMBAUD <pierre.rambaud@prestashop.com>
Date: Fri, 12 Feb 2021 15:26:54 +0100
Subject: [PATCH 2/3] Fully escape string cells

Surround by " all cells in order to prevent the usage of
---
 classes/module/ModuleGraph.php         |  8 ++++++--
 tests/Unit/Classes/ModuleGraphTest.php | 13 +++++++------
 2 files changed, 13 insertions(+), 8 deletions(-)

diff --git a/classes/module/ModuleGraph.php b/classes/module/ModuleGraph.php
index f50a099cf518..ccd9b596e4e4 100644
--- a/classes/module/ModuleGraph.php
+++ b/classes/module/ModuleGraph.php
@@ -379,10 +379,14 @@ public function getLang()
      */
     public function escapeCell(string $content): string
     {
+        $escaped = '"'; sprintf('"%s"', str_replace('"', '""', $content));
         if (preg_match('~^[=+\-@]~', $content)) {
-            return '\'' . $content;
+            $content = '\'' . $content;
         }
 
-        return $content;
+        $escaped .= str_replace('"', '""', $content);
+        $escaped .= '"';
+
+        return $escaped;
     }
 }
diff --git a/tests/Unit/Classes/ModuleGraphTest.php b/tests/Unit/Classes/ModuleGraphTest.php
index 96a1a8db80a8..0d93fed582fc 100644
--- a/tests/Unit/Classes/ModuleGraphTest.php
+++ b/tests/Unit/Classes/ModuleGraphTest.php
@@ -64,12 +64,13 @@ public function testEscapeCell($base, $expected)
     public function getEscapeCellValues()
     {
         return [
-            ['=CMD', '\'=CMD'],
-            ['@here', '\'@here'],
-            ['+something', '\'+something'],
-            ['-thing', '\'-thing'],
-            ['hello world', 'hello world'],
-            ['=@+-', '\'=@+-'],
+            ['=CMD', '"\'=CMD"'],
+            ['@here', '"\'@here"'],
+            ['+something', '"\'+something"'],
+            ['-thing', '"\'-thing"'],
+            ['hello world', '"hello world"'],
+            ['=@+-', '"\'=@+-"'],
+            ['Hey "you"!', '"Hey ""you""!"'],
         ];
     }
 }

From 09275345f369cb1270210ee378d903da1401e254 Mon Sep 17 00:00:00 2001
From: Pierre RAMBAUD <pierre.rambaud@prestashop.com>
Date: Fri, 12 Feb 2021 15:31:50 +0100
Subject: [PATCH 3/3] Add comment explaning what the method do

---
 classes/module/ModuleGraph.php | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/classes/module/ModuleGraph.php b/classes/module/ModuleGraph.php
index ccd9b596e4e4..ee4f1fd5cd7b 100644
--- a/classes/module/ModuleGraph.php
+++ b/classes/module/ModuleGraph.php
@@ -371,7 +371,10 @@ public function getLang()
     }
 
     /**
-     * Escape cell content
+     * Escape cell content.
+     * If the content begins with =+-@ a quote is added at the beginning of
+     * the string.
+     * In all situation, add double quote to encapsulate the content.
      *
      * @param string $content
      *
@@ -379,7 +382,7 @@ public function getLang()
      */
     public function escapeCell(string $content): string
     {
-        $escaped = '"'; sprintf('"%s"', str_replace('"', '""', $content));
+        $escaped = '"';
         if (preg_match('~^[=+\-@]~', $content)) {
             $content = '\'' . $content;
         }
