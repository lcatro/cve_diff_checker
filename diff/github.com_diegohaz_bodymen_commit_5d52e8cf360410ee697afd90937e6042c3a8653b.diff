From 5d52e8cf360410ee697afd90937e6042c3a8653b Mon Sep 17 00:00:00 2001
From: Haz <hazdiego@gmail.com>
Date: Sun, 16 Feb 2020 19:10:48 -0300
Subject: [PATCH] Fix prototype pollution vulnerability (#23)

* Fix prototype pollution vulnerability

* Update .travis.yml
---
 .travis.yml   |  2 --
 src/index.js  |  8 ++++++++
 test/index.js | 15 +++++++++++++++
 3 files changed, 23 insertions(+), 2 deletions(-)

diff --git a/.travis.yml b/.travis.yml
index c47f2b0..02b2987 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -1,7 +1,5 @@
 language: node_js
 node_js:
   - v6
-  - v5
-  - v4
 after_script:
   - 'npm run coveralls'
diff --git a/src/index.js b/src/index.js
index c57cc60..91d10c9 100644
--- a/src/index.js
+++ b/src/index.js
@@ -18,6 +18,14 @@ export const handlers = {
  * @param {Function} [fn] - Set the handler method.
  */
 export function handler (type, name, fn) {
+  if (
+    type === 'constructor' ||
+    type === '__proto__' ||
+    name === 'constructor' ||
+    name === '__proto__'
+  ) {
+    return
+  }
   if (arguments.length > 2) {
     handlers[type][name] = fn
   }
diff --git a/test/index.js b/test/index.js
index 841a4eb..5b97aa5 100644
--- a/test/index.js
+++ b/test/index.js
@@ -116,3 +116,18 @@ test('Bodymen middleware', (t) => {
       t.same(res.body, {links: [{icon: 'path to icon'}]}, 'should respond with correct object')
     })
 })
+
+test('Prototype pollution', (t) => {
+  const { toString } = {}
+
+  bodymen.handler('__proto__', 'toString', 'JHU')
+  t.ok({}.toString === toString, 'should not be vulnerable to prototype pollution')
+
+  bodymen.handler('formatters', '__proto__', { toString: 'JHU' })
+  t.ok({}.toString === toString, 'should not be vulnerable to prototype pollution')
+
+  bodymen.handler('validators', '__proto__', { toString: 'JHU' })
+  t.ok({}.toString === toString, 'should not be vulnerable to prototype pollution')
+
+  t.end()
+})
