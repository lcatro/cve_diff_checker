From 8574899e3b6455547b534f570b2330ff772e524b Mon Sep 17 00:00:00 2001
From: David Gutierrez <dgutierr@redhat.com>
Date: Thu, 23 Jun 2016 11:24:58 +0200
Subject: [PATCH] DASHBUILDE-113: SQL Injection on data set lookup filters

---
 .../sql/dialect/DefaultDialect.java           |  4 +-
 .../sql/SQLInjectionAttacksTest.java          | 99 +++++++++++++++++++
 .../dataprovider/sql/SQLTestSuite.java        |  1 +
 3 files changed, 103 insertions(+), 1 deletion(-)
 create mode 100644 dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLInjectionAttacksTest.java

diff --git a/dashbuilder-backend/dashbuilder-dataset-sql/src/main/java/org/dashbuilder/dataprovider/sql/dialect/DefaultDialect.java b/dashbuilder-backend/dashbuilder-dataset-sql/src/main/java/org/dashbuilder/dataprovider/sql/dialect/DefaultDialect.java
index 8020b9c0b..5ed206d04 100644
--- a/dashbuilder-backend/dashbuilder-dataset-sql/src/main/java/org/dashbuilder/dataprovider/sql/dialect/DefaultDialect.java
+++ b/dashbuilder-backend/dashbuilder-dataset-sql/src/main/java/org/dashbuilder/dataprovider/sql/dialect/DefaultDialect.java
@@ -545,7 +545,9 @@ public String getDateParameterSQL(Date param) {
 
     @Override
     public String getStringParameterSQL(String param) {
-        return "'" + param + "'";
+        // DASHBUILDE-113: SQL Injection on data set lookup filters
+        String escapedParam = param.replaceAll("'", "''");
+        return "'" + escapedParam + "'";
     }
 
     @Override
diff --git a/dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLInjectionAttacksTest.java b/dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLInjectionAttacksTest.java
new file mode 100644
index 000000000..3c40620f7
--- /dev/null
+++ b/dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLInjectionAttacksTest.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright 2016 Red Hat, Inc. and/or its affiliates.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.dashbuilder.dataprovider.sql;
+
+import org.dashbuilder.dataset.DataSet;
+import org.dashbuilder.dataset.DataSetGroupTest;
+import org.dashbuilder.dataset.DataSetLookupFactory;
+import org.dashbuilder.dataset.filter.FilterFactory;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
+import org.slf4j.Logger;
+
+import static org.dashbuilder.dataset.ExpenseReportsData.*;
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
+
+@RunWith(MockitoJUnitRunner.class)
+public class SQLInjectionAttacksTest extends SQLDataSetTestBase {
+
+    @Mock
+    Logger logger;
+
+    @Before
+    public void setUp() throws Exception{
+        super.setUp();
+
+        sqlDataSetProvider.log = logger;
+
+        doAnswer(invocationOnMock -> {
+                String sql = (String) invocationOnMock.getArguments()[0];
+                System.out.println(sql);
+                return null;
+        }).when(logger).debug(anyString());
+    }
+
+    @Override
+    public void testAll() throws Exception {
+        testStringFilterInjection();
+    }
+
+    public void testStringFilterInjection() throws Exception {
+        DataSet result = dataSetManager.lookupDataSet(
+                DataSetLookupFactory.newDataSetLookupBuilder()
+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)
+                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo("David' OR EMPLOYEE != 'Toni"))
+                        .buildLookup());
+
+        assertEquals(result.getRowCount(), 0);
+
+        result = dataSetManager.lookupDataSet(
+                DataSetLookupFactory.newDataSetLookupBuilder()
+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)
+                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo("David\" OR EMPLOYEE != \"Toni"))
+                        .buildLookup());
+
+        assertEquals(result.getRowCount(), 0);
+
+        result = dataSetManager.lookupDataSet(
+                DataSetLookupFactory.newDataSetLookupBuilder()
+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)
+                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo("David` OR EMPLOYEE != `Toni"))
+                        .buildLookup());
+
+        assertEquals(result.getRowCount(), 0);
+
+    }
+
+    @Test
+    public void testDropTable() throws Exception {
+        DataSet result = dataSetManager.lookupDataSet(
+                DataSetLookupFactory.newDataSetLookupBuilder()
+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)
+                        .filter(COLUMN_EMPLOYEE, FilterFactory.equalsTo("David'; DROP TABLE 'EXPENSE_REPORTS; SELECT 'a' = 'a"))
+                        .buildLookup());
+
+        result = dataSetManager.lookupDataSet(
+                DataSetLookupFactory.newDataSetLookupBuilder()
+                        .dataset(DataSetGroupTest.EXPENSE_REPORTS)
+                        .buildLookup());
+
+        assertEquals(result.getRowCount(), 50);
+    }
+}
diff --git a/dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLTestSuite.java b/dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLTestSuite.java
index 69b76639f..eae4f4ccf 100644
--- a/dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLTestSuite.java
+++ b/dashbuilder-backend/dashbuilder-dataset-sql/src/test/java/org/dashbuilder/dataprovider/sql/SQLTestSuite.java
@@ -37,6 +37,7 @@ public void setUp() throws Exception {
         sqlTestList.add(setUp(new SQLDataSetTrimTest()));
         sqlTestList.add(setUp(new SQLTableDataSetLookupTest()));
         sqlTestList.add(setUp(new SQLQueryDataSetLookupTest()));
+        sqlTestList.add(setUp(new SQLInjectionAttacksTest()));
     }
 
     public void testAll() throws Exception {
