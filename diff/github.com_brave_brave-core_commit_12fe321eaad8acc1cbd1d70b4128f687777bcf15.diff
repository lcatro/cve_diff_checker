From 5e099e88e02907d4553adf4eb04590113f703233 Mon Sep 17 00:00:00 2001
From: Anthony Tseng <darkdh@gmail.com>
Date: Mon, 1 Feb 2021 16:35:24 -0800
Subject: [PATCH 1/4] DoH requests should respect proxy config Tested on
 Firefox: When DoH is enabled, the requests will route through proxy

---
 chromium_src/net/dns/dns_transaction.cc | 10 ++++++++++
 1 file changed, 10 insertions(+)
 create mode 100644 chromium_src/net/dns/dns_transaction.cc

diff --git a/chromium_src/net/dns/dns_transaction.cc b/chromium_src/net/dns/dns_transaction.cc
new file mode 100644
index 000000000000..affe781af3e3
--- /dev/null
+++ b/chromium_src/net/dns/dns_transaction.cc
@@ -0,0 +1,10 @@
+/* Copyright (c) 2021 The Brave Authors. All rights reserved.
+ * This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "net/base/load_flags.h"
+
+#define LOAD_BYPASS_PROXY LOAD_DISABLE_CACHE
+#include "../../../../net/dns/dns_transaction.cc"
+#undef LOAD_BYPASS_PROXY

From 745570427b6e49e9764eb34156300abbc24efb31 Mon Sep 17 00:00:00 2001
From: Anthony Tseng <darkdh@gmail.com>
Date: Mon, 1 Feb 2021 16:38:26 -0800
Subject: [PATCH 2/4] Enforce DoH for the CNAME adblock DNS query for Tor
 context because we currently have no better way to route insecure DNS query
 through proxy like "Proxy DNS when using SOCKS v5"
 (network.proxy.socks_remote_dns) that Firefox has

---
 browser/net/BUILD.gn                          |  7 ++--
 ...ave_ad_block_tp_network_delegate_helper.cc | 37 ++++++++++++++++++-
 2 files changed, 39 insertions(+), 5 deletions(-)

diff --git a/browser/net/BUILD.gn b/browser/net/BUILD.gn
index 94aca54a4839..a33c6948c98b 100644
--- a/browser/net/BUILD.gn
+++ b/browser/net/BUILD.gn
@@ -54,11 +54,12 @@ source_set("net") {
     "//brave/components/brave_webtorrent/browser/buildflags",
     "//brave/components/ipfs/buildflags",
     "//brave/extensions:common",
+    "//components/content_settings/core/browser",
+    "//components/country_codes",
     "//components/prefs",
     "//components/user_prefs",
     "//content/public/browser",
     "//content/public/common",
-    "//components/content_settings/core/browser",
     "//extensions/common:common_constants",
     "//mojo/public/cpp/bindings",
     "//mojo/public/cpp/system",
@@ -88,9 +89,7 @@ source_set("net") {
       "brave_referrals_network_delegate_helper.h",
     ]
 
-    deps += [
-      "//brave/components/brave_referrals/browser",
-    ]
+    deps += [ "//brave/components/brave_referrals/browser" ]
   }
 
   if (enable_brave_webtorrent) {
diff --git a/browser/net/brave_ad_block_tp_network_delegate_helper.cc b/browser/net/brave_ad_block_tp_network_delegate_helper.cc
index d7fdae37626a..3bb2554d9022 100644
--- a/browser/net/brave_ad_block_tp_network_delegate_helper.cc
+++ b/browser/net/brave_ad_block_tp_network_delegate_helper.cc
@@ -20,6 +20,8 @@
 #include "brave/components/brave_shields/browser/brave_shields_web_contents_observer.h"
 #include "brave/components/brave_shields/common/brave_shield_constants.h"
 #include "brave/grit/brave_generated_resources.h"
+#include "chrome/browser/net/secure_dns_util.h"
+#include "components/country_codes/country_codes.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/render_frame_host.h"
@@ -27,10 +29,13 @@
 #include "content/public/browser/web_contents.h"
 #include "extensions/common/url_pattern.h"
 #include "mojo/public/cpp/bindings/remote.h"
+#include "net/dns/public/doh_provider_entry.h"
 #include "services/network/network_context.h"
 #include "ui/base/resource/resource_bundle.h"
 #include "url/url_canon.h"
 
+namespace secure_dns = chrome_browser_net::secure_dns;
+
 namespace brave {
 
 namespace {
@@ -52,6 +57,13 @@ content::WebContents* GetWebContents(int render_process_id,
   return web_contents;
 }
 
+net::DohProviderEntry::List GetFilteredProviders() {
+  const auto local_providers = secure_dns::ProvidersForCountry(
+      net::DohProviderEntry::GetList(), country_codes::GetCurrentCountryID());
+  return secure_dns::RemoveDisabledProviders(
+      local_providers, secure_dns::GetDisabledProviders());
+}
+
 }  // namespace
 
 void ShouldBlockAdOnTaskRunner(std::shared_ptr<BraveRequestInfo> ctx,
@@ -117,6 +129,7 @@ void ShouldBlockAdWithOptionalCname(
 class AdblockCnameResolveHostClient : public network::mojom::ResolveHostClient {
  private:
   mojo::Receiver<network::mojom::ResolveHostClient> receiver_{this};
+  mojo::Remote<network::mojom::HostResolver> host_resolver_;
   base::OnceCallback<void(base::Optional<std::string>)> cb_;
   base::TimeTicks start_time_;
 
@@ -148,13 +161,35 @@ class AdblockCnameResolveHostClient : public network::mojom::ResolveHostClient {
     // See https://crbug.com/872665
     optional_parameters->source = net::HostResolverSource::DNS;
 
+    net::DnsConfigOverrides dns_config_overrides;
+    if (context->IsTor()) {
+      // Enforce DoH for Tor
+      // TODO(darkdh): we can consider implementing
+      // "Proxy DNS when using SOCKS v5" (network.proxy.socks_remote_dns)
+      // like Firefox has so that we don't have to enforce DoH
+      dns_config_overrides.secure_dns_mode = net::SecureDnsMode::kSecure;
+      std::vector<net::DnsOverHttpsServerConfig> doh_servers;
+      for (const auto* entry : GetFilteredProviders()) {
+        doh_servers.emplace_back(entry->dns_over_https_template, true);
+      }
+      dns_config_overrides.dns_over_https_servers.emplace(doh_servers);
+    }
+
     network::mojom::NetworkContext* network_context =
         content::BrowserContext::GetDefaultStoragePartition(context)
             ->GetNetworkContext();
 
     start_time_ = base::TimeTicks::Now();
 
-    network_context->ResolveHost(
+    host_resolver_.reset();
+    network_context->CreateHostResolver(
+        dns_config_overrides, host_resolver_.BindNewPipeAndPassReceiver());
+
+    if (!host_resolver_) {
+      this->OnComplete(net::ERR_FAILED, net::ResolveErrorInfo(), base::nullopt);
+      return;
+    }
+    host_resolver_->ResolveHost(
         net::HostPortPair::FromURL(ctx->request_url), network_isolation_key,
         std::move(optional_parameters), receiver_.BindNewPipeAndPassRemote());
 

From 47118d97c8561bd455da9ff72f4cb42cdac6be03 Mon Sep 17 00:00:00 2001
From: Anthony Tseng <darkdh@gmail.com>
Date: Tue, 2 Feb 2021 17:28:36 -0800
Subject: [PATCH 3/4] Bypass CNAME adblocking for Tor when DoH is not enabled
 by users

---
 browser/net/BUILD.gn                          |  1 -
 ...ave_ad_block_tp_network_delegate_helper.cc | 66 ++++++----------
 ...ock_tp_network_delegate_helper_unittest.cc | 75 +++++++++++++++++++
 3 files changed, 97 insertions(+), 45 deletions(-)

diff --git a/browser/net/BUILD.gn b/browser/net/BUILD.gn
index a33c6948c98b..25be6c6b6158 100644
--- a/browser/net/BUILD.gn
+++ b/browser/net/BUILD.gn
@@ -55,7 +55,6 @@ source_set("net") {
     "//brave/components/ipfs/buildflags",
     "//brave/extensions:common",
     "//components/content_settings/core/browser",
-    "//components/country_codes",
     "//components/prefs",
     "//components/user_prefs",
     "//content/public/browser",
diff --git a/browser/net/brave_ad_block_tp_network_delegate_helper.cc b/browser/net/brave_ad_block_tp_network_delegate_helper.cc
index 3bb2554d9022..901f884519cc 100644
--- a/browser/net/brave_ad_block_tp_network_delegate_helper.cc
+++ b/browser/net/brave_ad_block_tp_network_delegate_helper.cc
@@ -20,8 +20,8 @@
 #include "brave/components/brave_shields/browser/brave_shields_web_contents_observer.h"
 #include "brave/components/brave_shields/common/brave_shield_constants.h"
 #include "brave/grit/brave_generated_resources.h"
-#include "chrome/browser/net/secure_dns_util.h"
-#include "components/country_codes/country_codes.h"
+#include "chrome/browser/net/secure_dns_config.h"
+#include "chrome/browser/net/system_network_context_manager.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/render_frame_host.h"
@@ -29,13 +29,10 @@
 #include "content/public/browser/web_contents.h"
 #include "extensions/common/url_pattern.h"
 #include "mojo/public/cpp/bindings/remote.h"
-#include "net/dns/public/doh_provider_entry.h"
 #include "services/network/network_context.h"
 #include "ui/base/resource/resource_bundle.h"
 #include "url/url_canon.h"
 
-namespace secure_dns = chrome_browser_net::secure_dns;
-
 namespace brave {
 
 namespace {
@@ -57,13 +54,6 @@ content::WebContents* GetWebContents(int render_process_id,
   return web_contents;
 }
 
-net::DohProviderEntry::List GetFilteredProviders() {
-  const auto local_providers = secure_dns::ProvidersForCountry(
-      net::DohProviderEntry::GetList(), country_codes::GetCurrentCountryID());
-  return secure_dns::RemoveDisabledProviders(
-      local_providers, secure_dns::GetDisabledProviders());
-}
-
 }  // namespace
 
 void ShouldBlockAdOnTaskRunner(std::shared_ptr<BraveRequestInfo> ctx,
@@ -77,16 +67,15 @@ void ShouldBlockAdOnTaskRunner(std::shared_ptr<BraveRequestInfo> ctx,
   std::string source_host = ctx->initiator_url.host();
 
   g_brave_browser_process->ad_block_service()->ShouldStartRequest(
-        ctx->request_url, ctx->resource_type, source_host,
-        &did_match_rule, &did_match_exception, &did_match_important,
-        &ctx->mock_data_url);
+      ctx->request_url, ctx->resource_type, source_host, &did_match_rule,
+      &did_match_exception, &did_match_important, &ctx->mock_data_url);
   if (did_match_important) {
     ctx->blocked_by = kAdBlocked;
     return;
   }
 
-  if (canonical_name.has_value() && ctx->request_url.host() != *canonical_name
-      && *canonical_name != "") {
+  if (canonical_name.has_value() &&
+      ctx->request_url.host() != *canonical_name && *canonical_name != "") {
     GURL::Replacements replacements = GURL::Replacements();
     replacements.SetHost(
         canonical_name->c_str(),
@@ -94,9 +83,8 @@ void ShouldBlockAdOnTaskRunner(std::shared_ptr<BraveRequestInfo> ctx,
     const GURL canonical_url = ctx->request_url.ReplaceComponents(replacements);
 
     g_brave_browser_process->ad_block_service()->ShouldStartRequest(
-        ctx->request_url, ctx->resource_type, source_host,
-        &did_match_rule, &did_match_exception, &did_match_important,
-        &ctx->mock_data_url);
+        ctx->request_url, ctx->resource_type, source_host, &did_match_rule,
+        &did_match_exception, &did_match_important, &ctx->mock_data_url);
   }
 
   if (did_match_important || (did_match_rule && !did_match_exception)) {
@@ -129,7 +117,6 @@ void ShouldBlockAdWithOptionalCname(
 class AdblockCnameResolveHostClient : public network::mojom::ResolveHostClient {
  private:
   mojo::Receiver<network::mojom::ResolveHostClient> receiver_{this};
-  mojo::Remote<network::mojom::HostResolver> host_resolver_;
   base::OnceCallback<void(base::Optional<std::string>)> cb_;
   base::TimeTicks start_time_;
 
@@ -161,35 +148,13 @@ class AdblockCnameResolveHostClient : public network::mojom::ResolveHostClient {
     // See https://crbug.com/872665
     optional_parameters->source = net::HostResolverSource::DNS;
 
-    net::DnsConfigOverrides dns_config_overrides;
-    if (context->IsTor()) {
-      // Enforce DoH for Tor
-      // TODO(darkdh): we can consider implementing
-      // "Proxy DNS when using SOCKS v5" (network.proxy.socks_remote_dns)
-      // like Firefox has so that we don't have to enforce DoH
-      dns_config_overrides.secure_dns_mode = net::SecureDnsMode::kSecure;
-      std::vector<net::DnsOverHttpsServerConfig> doh_servers;
-      for (const auto* entry : GetFilteredProviders()) {
-        doh_servers.emplace_back(entry->dns_over_https_template, true);
-      }
-      dns_config_overrides.dns_over_https_servers.emplace(doh_servers);
-    }
-
     network::mojom::NetworkContext* network_context =
         content::BrowserContext::GetDefaultStoragePartition(context)
             ->GetNetworkContext();
 
     start_time_ = base::TimeTicks::Now();
 
-    host_resolver_.reset();
-    network_context->CreateHostResolver(
-        dns_config_overrides, host_resolver_.BindNewPipeAndPassReceiver());
-
-    if (!host_resolver_) {
-      this->OnComplete(net::ERR_FAILED, net::ResolveErrorInfo(), base::nullopt);
-      return;
-    }
-    host_resolver_->ResolveHost(
+    network_context->ResolveHost(
         net::HostPortPair::FromURL(ctx->request_url), network_isolation_key,
         std::move(optional_parameters), receiver_.BindNewPipeAndPassRemote());
 
@@ -258,6 +223,19 @@ int OnBeforeURLRequest_AdBlockTPPreWork(const ResponseCallback& next_callback,
     return net::OK;
   }
 
+  DCHECK(ctx->browser_context);
+  if (ctx->browser_context->IsTor()) {
+    SecureDnsConfig secure_dns_config =
+        SystemNetworkContextManager::GetStubResolverConfigReader()
+            ->GetSecureDnsConfiguration(false);
+    // We can only proceed when DoH mode is SECURE and DoH server list is not
+    // empty. AUTOMATIC mode will fallback to insecure when DoH attempt failed
+    // so we need to abort it either.
+    if (secure_dns_config.mode() != net::SecureDnsMode::kSecure ||
+        secure_dns_config.servers().empty()) {
+      return net::OK;
+    }
+  }
   OnBeforeURLRequestAdBlockTP(next_callback, ctx);
 
   return net::ERR_IO_PENDING;
diff --git a/browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc b/browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc
index f1affeb7bf07..396649ccb024 100644
--- a/browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc
+++ b/browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc
@@ -11,6 +11,14 @@
 
 #include "brave/browser/net/url_context.h"
 #include "brave/common/network_constants.h"
+#include "chrome/browser/net/secure_dns_config.h"
+#include "chrome/browser/net/stub_resolver_config_reader.h"
+#include "chrome/browser/net/system_network_context_manager.h"
+#include "chrome/common/pref_names.h"
+#include "chrome/test/base/scoped_testing_local_state.h"
+#include "chrome/test/base/testing_browser_process.h"
+#include "content/public/test/browser_task_environment.h"
+#include "content/public/test/test_browser_context.h"
 #include "net/base/net_errors.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
@@ -32,3 +40,70 @@ TEST(BraveAdBlockTPNetworkDelegateHelperTest, EmptyRequestURL) {
   EXPECT_TRUE(request_info->new_url_spec.empty());
   EXPECT_EQ(rc, net::OK);
 }
+
+namespace {
+class TestTorBrowserContext : public content::TestBrowserContext {
+ public:
+  TestTorBrowserContext() : content::TestBrowserContext() {}
+  ~TestTorBrowserContext() override = default;
+
+  bool IsTor() const override { return true; }
+};
+}  // namespace
+
+class BraveCNAMEAdBlockTest : public testing::Test {
+ public:
+  BraveCNAMEAdBlockTest() : tor_browser_context_(new TestTorBrowserContext()) {
+    local_state_ = std::make_unique<ScopedTestingLocalState>(
+        TestingBrowserProcess::GetGlobal());
+
+    // SystemNetworkContextManager cannot be instantiated here, which normally
+    // owns the StubResolverConfigReader instance, so inject a
+    // StubResolverConfigReader instance here.
+    stub_resolver_config_reader_ =
+        std::make_unique<StubResolverConfigReader>(local_state_->Get());
+    SystemNetworkContextManager::set_stub_resolver_config_reader_for_testing(
+        stub_resolver_config_reader_.get());
+  }
+  ~BraveCNAMEAdBlockTest() override = default;
+
+  content::BrowserContext* tor_context() { return tor_browser_context_.get(); }
+
+  TestingPrefServiceSimple* local_state() { return local_state_->Get(); }
+
+ private:
+  content::BrowserTaskEnvironment task_environment_;
+  std::unique_ptr<content::BrowserContext> tor_browser_context_;
+  std::unique_ptr<ScopedTestingLocalState> local_state_;
+  std::unique_ptr<StubResolverConfigReader> stub_resolver_config_reader_;
+};
+
+TEST_F(BraveCNAMEAdBlockTest, DisableInsecureRequestsOverTor) {
+  const GURL url("https://wow.brave.com");
+  auto request_info = std::make_shared<brave::BraveRequestInfo>(url);
+  request_info->tab_origin = GURL("https://brave.com");
+  request_info->resource_type = blink::mojom::ResourceType::kMainFrame;
+  request_info->browser_context = tor_context();
+
+  // Automatic
+  local_state()->SetManagedPref(
+      prefs::kDnsOverHttpsMode,
+      std::make_unique<base::Value>(SecureDnsConfig::kModeAutomatic));
+  int rc =
+      OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);
+  EXPECT_EQ(rc, net::OK);
+
+  // Off
+  local_state()->SetManagedPref(
+      prefs::kDnsOverHttpsMode,
+      std::make_unique<base::Value>(SecureDnsConfig::kModeOff));
+  rc = OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);
+  EXPECT_EQ(rc, net::OK);
+
+  // Secure without server list
+  local_state()->SetManagedPref(
+      prefs::kDnsOverHttpsMode,
+      std::make_unique<base::Value>(SecureDnsConfig::kModeSecure));
+  rc = OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);
+  EXPECT_EQ(rc, net::OK);
+}

From a148c43124434ca5440c9fef1a99b9b712c966a0 Mon Sep 17 00:00:00 2001
From: Anthony Tseng <darkdh@gmail.com>
Date: Wed, 3 Feb 2021 14:09:56 -0800
Subject: [PATCH 4/4] Disable CNAME adblock for Tor

---
 ...ave_ad_block_tp_network_delegate_helper.cc | 26 +++----
 ...ock_tp_network_delegate_helper_unittest.cc | 75 -------------------
 chromium_src/net/dns/dns_transaction.cc       | 10 ---
 3 files changed, 10 insertions(+), 101 deletions(-)
 delete mode 100644 chromium_src/net/dns/dns_transaction.cc

diff --git a/browser/net/brave_ad_block_tp_network_delegate_helper.cc b/browser/net/brave_ad_block_tp_network_delegate_helper.cc
index 901f884519cc..c5208b8a45b3 100644
--- a/browser/net/brave_ad_block_tp_network_delegate_helper.cc
+++ b/browser/net/brave_ad_block_tp_network_delegate_helper.cc
@@ -20,8 +20,6 @@
 #include "brave/components/brave_shields/browser/brave_shields_web_contents_observer.h"
 #include "brave/components/brave_shields/common/brave_shield_constants.h"
 #include "brave/grit/brave_generated_resources.h"
-#include "chrome/browser/net/secure_dns_config.h"
-#include "chrome/browser/net/system_network_context_manager.h"
 #include "content/public/browser/browser_context.h"
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/render_frame_host.h"
@@ -206,7 +204,16 @@ void OnBeforeURLRequestAdBlockTP(const ResponseCallback& next_callback,
   scoped_refptr<base::SequencedTaskRunner> task_runner =
       g_brave_browser_process->ad_block_service()->GetTaskRunner();
 
-  new AdblockCnameResolveHostClient(std::move(next_callback), task_runner, ctx);
+  DCHECK(ctx->browser_context);
+  // DoH or standard DNS quries won't be routed through Tor, so we need to skip
+  // it.
+  if (ctx->browser_context->IsTor()) {
+    ShouldBlockAdWithOptionalCname(task_runner, std::move(next_callback), ctx,
+                                   base::nullopt);
+  } else {
+    new AdblockCnameResolveHostClient(std::move(next_callback), task_runner,
+                                      ctx);
+  }
 }
 
 int OnBeforeURLRequest_AdBlockTPPreWork(const ResponseCallback& next_callback,
@@ -223,19 +230,6 @@ int OnBeforeURLRequest_AdBlockTPPreWork(const ResponseCallback& next_callback,
     return net::OK;
   }
 
-  DCHECK(ctx->browser_context);
-  if (ctx->browser_context->IsTor()) {
-    SecureDnsConfig secure_dns_config =
-        SystemNetworkContextManager::GetStubResolverConfigReader()
-            ->GetSecureDnsConfiguration(false);
-    // We can only proceed when DoH mode is SECURE and DoH server list is not
-    // empty. AUTOMATIC mode will fallback to insecure when DoH attempt failed
-    // so we need to abort it either.
-    if (secure_dns_config.mode() != net::SecureDnsMode::kSecure ||
-        secure_dns_config.servers().empty()) {
-      return net::OK;
-    }
-  }
   OnBeforeURLRequestAdBlockTP(next_callback, ctx);
 
   return net::ERR_IO_PENDING;
diff --git a/browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc b/browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc
index 396649ccb024..f1affeb7bf07 100644
--- a/browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc
+++ b/browser/net/brave_ad_block_tp_network_delegate_helper_unittest.cc
@@ -11,14 +11,6 @@
 
 #include "brave/browser/net/url_context.h"
 #include "brave/common/network_constants.h"
-#include "chrome/browser/net/secure_dns_config.h"
-#include "chrome/browser/net/stub_resolver_config_reader.h"
-#include "chrome/browser/net/system_network_context_manager.h"
-#include "chrome/common/pref_names.h"
-#include "chrome/test/base/scoped_testing_local_state.h"
-#include "chrome/test/base/testing_browser_process.h"
-#include "content/public/test/browser_task_environment.h"
-#include "content/public/test/test_browser_context.h"
 #include "net/base/net_errors.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
@@ -40,70 +32,3 @@ TEST(BraveAdBlockTPNetworkDelegateHelperTest, EmptyRequestURL) {
   EXPECT_TRUE(request_info->new_url_spec.empty());
   EXPECT_EQ(rc, net::OK);
 }
-
-namespace {
-class TestTorBrowserContext : public content::TestBrowserContext {
- public:
-  TestTorBrowserContext() : content::TestBrowserContext() {}
-  ~TestTorBrowserContext() override = default;
-
-  bool IsTor() const override { return true; }
-};
-}  // namespace
-
-class BraveCNAMEAdBlockTest : public testing::Test {
- public:
-  BraveCNAMEAdBlockTest() : tor_browser_context_(new TestTorBrowserContext()) {
-    local_state_ = std::make_unique<ScopedTestingLocalState>(
-        TestingBrowserProcess::GetGlobal());
-
-    // SystemNetworkContextManager cannot be instantiated here, which normally
-    // owns the StubResolverConfigReader instance, so inject a
-    // StubResolverConfigReader instance here.
-    stub_resolver_config_reader_ =
-        std::make_unique<StubResolverConfigReader>(local_state_->Get());
-    SystemNetworkContextManager::set_stub_resolver_config_reader_for_testing(
-        stub_resolver_config_reader_.get());
-  }
-  ~BraveCNAMEAdBlockTest() override = default;
-
-  content::BrowserContext* tor_context() { return tor_browser_context_.get(); }
-
-  TestingPrefServiceSimple* local_state() { return local_state_->Get(); }
-
- private:
-  content::BrowserTaskEnvironment task_environment_;
-  std::unique_ptr<content::BrowserContext> tor_browser_context_;
-  std::unique_ptr<ScopedTestingLocalState> local_state_;
-  std::unique_ptr<StubResolverConfigReader> stub_resolver_config_reader_;
-};
-
-TEST_F(BraveCNAMEAdBlockTest, DisableInsecureRequestsOverTor) {
-  const GURL url("https://wow.brave.com");
-  auto request_info = std::make_shared<brave::BraveRequestInfo>(url);
-  request_info->tab_origin = GURL("https://brave.com");
-  request_info->resource_type = blink::mojom::ResourceType::kMainFrame;
-  request_info->browser_context = tor_context();
-
-  // Automatic
-  local_state()->SetManagedPref(
-      prefs::kDnsOverHttpsMode,
-      std::make_unique<base::Value>(SecureDnsConfig::kModeAutomatic));
-  int rc =
-      OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);
-  EXPECT_EQ(rc, net::OK);
-
-  // Off
-  local_state()->SetManagedPref(
-      prefs::kDnsOverHttpsMode,
-      std::make_unique<base::Value>(SecureDnsConfig::kModeOff));
-  rc = OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);
-  EXPECT_EQ(rc, net::OK);
-
-  // Secure without server list
-  local_state()->SetManagedPref(
-      prefs::kDnsOverHttpsMode,
-      std::make_unique<base::Value>(SecureDnsConfig::kModeSecure));
-  rc = OnBeforeURLRequest_AdBlockTPPreWork(ResponseCallback(), request_info);
-  EXPECT_EQ(rc, net::OK);
-}
diff --git a/chromium_src/net/dns/dns_transaction.cc b/chromium_src/net/dns/dns_transaction.cc
deleted file mode 100644
index affe781af3e3..000000000000
--- a/chromium_src/net/dns/dns_transaction.cc
+++ /dev/null
@@ -1,10 +0,0 @@
-/* Copyright (c) 2021 The Brave Authors. All rights reserved.
- * This Source Code Form is subject to the terms of the Mozilla Public
- * License, v. 2.0. If a copy of the MPL was not distributed with this file,
- * You can obtain one at http://mozilla.org/MPL/2.0/. */
-
-#include "net/base/load_flags.h"
-
-#define LOAD_BYPASS_PROXY LOAD_DISABLE_CACHE
-#include "../../../../net/dns/dns_transaction.cc"
-#undef LOAD_BYPASS_PROXY
