From f5ae7b35c90f14b7e66b3a91d4fb247563a8a22b Mon Sep 17 00:00:00 2001
From: Hanumanth Reddy Pothula <c_hpothu@codeaurora.org>
Date: Fri, 21 Aug 2015 19:58:01 +0530
Subject: wlan: Remove obsolete set/reset ssid hotlist

Remove obsolete set/reset ssid hotlist.

Change-Id: Ie6c4a9847f2daa9ba2aebd17f386d584201b86d6
CRs-Fixed: 2049138
---
 CORE/HDD/inc/wlan_hdd_cfg80211.h  |  19 +-
 CORE/HDD/src/wlan_hdd_cfg80211.c  | 612 --------------------------------------
 CORE/MAC/inc/sirApi.h             |  60 ----
 CORE/SME/inc/sme_Api.h            |  21 --
 CORE/SME/src/sme_common/sme_Api.c | 111 -------
 CORE/WDA/src/wlan_qct_wda.c       | 265 -----------------
 CORE/WDI/CP/inc/wlan_qct_wdi.h    |  65 +---
 CORE/WDI/CP/inc/wlan_qct_wdi_i.h  |  41 ---
 CORE/WDI/CP/src/wlan_qct_wdi.c    | 462 +---------------------------
 9 files changed, 13 insertions(+), 1643 deletions(-)

diff --git a/CORE/HDD/inc/wlan_hdd_cfg80211.h b/CORE/HDD/inc/wlan_hdd_cfg80211.h
index 604b327..9ae908c 100644
--- a/CORE/HDD/inc/wlan_hdd_cfg80211.h
+++ b/CORE/HDD/inc/wlan_hdd_cfg80211.h
@@ -181,10 +181,12 @@ enum qca_nl80211_vendor_subcmds {
     QCA_NL80211_VENDOR_SUBCMD_GET_WIFI_INFO = 61,
     /* Start Wifi Memory Dump */
     QCA_NL80211_VENDOR_SUBCMD_WIFI_LOGGER_MEMORY_DUMP = 63,
-    QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_SET_SSID_HOTLIST = 65,
-    QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_RESET_SSID_HOTLIST = 66,
-    QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_FOUND = 67,
-    QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_LOST = 68,
+
+    /*
+     * APIs corresponding to the sub commands 65-68 are deprecated.
+     * These sub commands are reserved and not supposed to be used
+     * for any other purpose
+     */
 
     /* Wi-Fi Configuration subcommands */
     QCA_NL80211_VENDOR_SUBCMD_SET_WIFI_CONFIGURATION = 74,
@@ -231,11 +233,6 @@ enum qca_nl80211_vendor_subcmds_index {
     QCA_NL80211_VENDOR_SUBCMD_NAN_INDEX,
     QCA_NL80211_VENDOR_SUBCMD_WIFI_LOGGER_MEMORY_DUMP_INDEX,
 
-    QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_SET_SSID_HOTLIST_INDEX,
-    QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_RESET_SSID_HOTLIST_INDEX,
-    QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_FOUND_INDEX,
-    QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_LOST_INDEX,
-
     QCA_NL80211_VENDOR_SUBCMD_MONITOR_RSSI_INDEX,
     QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_AP_LOST_INDEX,
     QCA_NL80211_VENDOR_SUBCMD_NUD_STATS_GET_INDEX,
@@ -1047,10 +1044,6 @@ enum qca_wlan_vendor_attr_extscan_results
     /* Unsigned 32bit value; a EXTSCAN Capabilities attribute. */
     QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_CAPABILITIES_MAX_NUM_WHITELISTED_SSID,
 
-    /* EXTSCAN attributes for
-     * QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_FOUND sub-command &
-     * QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_LOST sub-command
-     */
     /* Use attr QCA_WLAN_VENDOR_ATTR_EXTSCAN_NUM_RESULTS_AVAILABLE
      * to indicate number of results.
      */
diff --git a/CORE/HDD/src/wlan_hdd_cfg80211.c b/CORE/HDD/src/wlan_hdd_cfg80211.c
index 7183598..38060a5 100644
--- a/CORE/HDD/src/wlan_hdd_cfg80211.c
+++ b/CORE/HDD/src/wlan_hdd_cfg80211.c
@@ -2538,70 +2538,6 @@ static void wlan_hdd_cfg80211_extscan_reset_bss_hotlist_rsp(void *ctx,
     return;
 }
 
-static void wlan_hdd_cfg80211_extscan_set_ssid_hotlist_rsp(void *ctx,
-                                                        void *pMsg)
-{
-    hdd_context_t *pHddCtx    = (hdd_context_t *)ctx;
-    tpSirEXTScanSetSsidHotListRspParams pData =
-                    (tpSirEXTScanSetSsidHotListRspParams) pMsg;
-    struct hdd_ext_scan_context *context;
-
-    if (wlan_hdd_validate_context(pHddCtx)){
-        return;
-    }
-
-    if (!pMsg)
-    {
-        hddLog(VOS_TRACE_LEVEL_ERROR, FL("pMsg is null"));
-        return;
-    }
-
-    hddLog(VOS_TRACE_LEVEL_INFO, "Req Id %u Status %u", pData->requestId,
-                                                        pData->status);
-
-    context = &pHddCtx->ext_scan_context;
-    spin_lock(&hdd_context_lock);
-    if (context->request_id == pData->requestId) {
-        context->response_status = pData->status ? -EINVAL : 0;
-        complete(&context->response_event);
-    }
-    spin_unlock(&hdd_context_lock);
-
-    return;
-}
-
-static void wlan_hdd_cfg80211_extscan_reset_ssid_hotlist_rsp(void *ctx,
-                                                          void *pMsg)
-{
-    hdd_context_t *pHddCtx  = (hdd_context_t *)ctx;
-    tpSirEXTScanResetSsidHotlistRspParams pData =
-                    (tpSirEXTScanResetSsidHotlistRspParams) pMsg;
-    struct hdd_ext_scan_context *context;
-
-    if (wlan_hdd_validate_context(pHddCtx)) {
-        return;
-    }
-    if (!pMsg)
-    {
-        hddLog(VOS_TRACE_LEVEL_ERROR, FL("pMsg is null"));
-        return;
-    }
-
-    hddLog(VOS_TRACE_LEVEL_INFO, "Req Id %u Status %u", pData->requestId,
-                                                        pData->status);
-
-    context = &pHddCtx->ext_scan_context;
-    spin_lock(&hdd_context_lock);
-    if (context->request_id == pData->requestId) {
-        context->response_status = pData->status ? -EINVAL : 0;
-        complete(&context->response_event);
-    }
-    spin_unlock(&hdd_context_lock);
-
-    return;
-}
-
-
 static void wlan_hdd_cfg80211_extscan_cached_results_ind(void *ctx,
                                                        void *pMsg)
 {
@@ -3009,156 +2945,6 @@ fail:
 
 }
 
-/**
- * wlan_hdd_cfg80211_extscan_hotlist_ssid_match_ind() -
- *	Handle an SSID hotlist match event
- * @ctx: HDD context registered with SME
- * @event: The SSID hotlist match event
- *
- * This function will take an SSID match event that was generated by
- * firmware and will convert it into a cfg80211 vendor event which is
- * sent to userspace.
- *
- * Return: none
- */
-static void
-wlan_hdd_cfg80211_extscan_hotlist_ssid_match_ind(void *ctx,
-                                                void *pMsg)
-{
-   hdd_context_t *hdd_ctx = ctx;
-   struct sk_buff *skb;
-   tANI_U32 i, index;
-   tpSirEXTScanSsidHotlistMatch pData = (tpSirEXTScanSsidHotlistMatch) pMsg;
-
-   ENTER();
-
-   if (wlan_hdd_validate_context(hdd_ctx)) {
-       hddLog(LOGE,
-              FL("HDD context is not valid or response"));
-       return;
-   }
-   if (!pMsg)
-   {
-       hddLog(VOS_TRACE_LEVEL_ERROR, FL("pMsg is null"));
-       return;
-   }
-
-    if (pData->ssid_found) {
-        index = QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_FOUND_INDEX;
-        hddLog(LOG1, "SSID hotlist found");
-    } else {
-        index = QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_LOST_INDEX;
-        hddLog(LOG1, "SSID hotlist lost");
-    }
-
-    skb = cfg80211_vendor_event_alloc(hdd_ctx->wiphy,
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3, 18, 0))
-                       NULL,
-#endif
-          EXTSCAN_EVENT_BUF_SIZE + NLMSG_HDRLEN,
-          index, GFP_KERNEL);
-
-    if (!skb) {
-        hddLog(LOGE, FL("cfg80211_vendor_event_alloc failed"));
-        return;
-    }
-    hddLog(LOG1, "Req Id %u, Num of SSIDs %u, More Data (%u)",
-           pData->requestId, pData->numHotlistSsid, pData->moreData);
-
-    for (i = 0; i < pData->numHotlistSsid; i++) {
-         hddLog(LOG1, "[i=%d] Timestamp %llu "
-               "Ssid: %s "
-               "Bssid (" MAC_ADDRESS_STR ") "
-               "Channel %u "
-               "Rssi %d "
-               "RTT %u "
-               "RTT_SD %u",
-               i,
-               pData->ssidHotlist[i].ts,
-               pData->ssidHotlist[i].ssid,
-               MAC_ADDR_ARRAY(pData->ssidHotlist[i].bssid),
-               pData->ssidHotlist[i].channel,
-               pData->ssidHotlist[i].rssi,
-               pData->ssidHotlist[i].rtt,
-               pData->ssidHotlist[i].rtt_sd);
-   }
-
-    if (nla_put_u32(skb,
-            QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_REQUEST_ID,
-            pData->requestId) ||
-        nla_put_u32(skb,
-            QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_NUM_RESULTS_AVAILABLE,
-            pData->numHotlistSsid)) {
-        hddLog(LOGE, FL("put fail"));
-        goto fail;
-    }
-
-    if (pData->numHotlistSsid) {
-        struct nlattr *aps;
-        aps = nla_nest_start(skb,
-                   QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_LIST);
-        if (!aps) {
-            hddLog(LOGE, FL("nest fail"));
-            goto fail;
-        }
-
-        for (i = 0; i < pData->numHotlistSsid; i++) {
-            struct nlattr *ap;
-
-            ap = nla_nest_start(skb, i);
-            if (!ap) {
-                hddLog(LOGE, FL("nest fail"));
-                goto fail;
-            }
-
-            if (nla_put_u64(skb,
-                    QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_SCAN_RESULT_TIME_STAMP,
-                    pData->ssidHotlist[i].ts) ||
-                nla_put(skb,
-                    QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_SCAN_RESULT_SSID,
-                    sizeof(pData->ssidHotlist[i].ssid),
-                    pData->ssidHotlist[i].ssid) ||
-                nla_put(skb,
-                    QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_SCAN_RESULT_BSSID,
-                    sizeof(pData->ssidHotlist[i].bssid),
-                    pData->ssidHotlist[i].bssid) ||
-                nla_put_u32(skb,
-                    QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_SCAN_RESULT_CHANNEL,
-                    pData->ssidHotlist[i].channel) ||
-                nla_put_s32(skb,
-                    QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_SCAN_RESULT_RSSI,
-                    pData->ssidHotlist[i].rssi) ||
-                nla_put_u32(skb,
-                    QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_SCAN_RESULT_RTT,
-                    pData->ssidHotlist[i].rtt) ||
-                nla_put_u32(skb,
-                    QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_SCAN_RESULT_RTT_SD,
-                    pData->ssidHotlist[i].rtt_sd)) {
-                hddLog(LOGE, FL("put fail"));
-                goto fail;
-            }
-            nla_nest_end(skb, ap);
-        }
-        nla_nest_end(skb, aps);
-
-        if (nla_put_u8(skb,
-                   QCA_WLAN_VENDOR_ATTR_EXTSCAN_RESULTS_SCAN_RESULT_MORE_DATA,
-                   pData->moreData)) {
-            hddLog(LOGE, FL("put fail"));
-            goto fail;
-        }
-    }
-
-    cfg80211_vendor_event(skb, GFP_KERNEL);
-    return;
-
-fail:
-    kfree_skb(skb);
-    return;
-
-}
-
-
 static void wlan_hdd_cfg80211_extscan_full_scan_result_event(void *ctx,
                                                            void *pMsg)
 {
@@ -3434,14 +3220,6 @@ void wlan_hdd_cfg80211_extscan_callback(void *ctx, const tANI_U16 evType,
         wlan_hdd_cfg80211_extscan_reset_bss_hotlist_rsp(ctx, pMsg);
         break;
 
-    case SIR_HAL_EXTSCAN_SET_SSID_HOTLIST_RSP:
-        wlan_hdd_cfg80211_extscan_set_ssid_hotlist_rsp(ctx, pMsg);
-        break;
-
-    case SIR_HAL_EXTSCAN_RESET_SSID_HOTLIST_RSP:
-        wlan_hdd_cfg80211_extscan_reset_ssid_hotlist_rsp(ctx, pMsg);
-        break;
-
     case SIR_HAL_EXTSCAN_GET_CAPABILITIES_RSP:
         wlan_hdd_cfg80211_extscan_get_capabilities_rsp(ctx, pMsg);
         break;
@@ -3457,9 +3235,6 @@ void wlan_hdd_cfg80211_extscan_callback(void *ctx, const tANI_U16 evType,
     case SIR_HAL_EXTSCAN_HOTLIST_MATCH_IND:
         wlan_hdd_cfg80211_extscan_hotlist_match_ind(ctx, pMsg);
         break;
-    case SIR_HAL_EXTSCAN_SSID_HOTLIST_MATCH_IND:
-        wlan_hdd_cfg80211_extscan_hotlist_ssid_match_ind(ctx, pMsg);
-        break;
     case SIR_HAL_EXTSCAN_FULL_SCAN_RESULT_IND:
         wlan_hdd_cfg80211_extscan_full_scan_result_event(ctx, pMsg);
         break;
@@ -3880,361 +3655,6 @@ static int wlan_hdd_cfg80211_extscan_set_bssid_hotlist(struct wiphy *wiphy,
    return ret;
 }
 
-/*
- * define short names for the global vendor params
- * used by wlan_hdd_cfg80211_extscan_set_ssid_hotlist()
- */
-#define PARAM_MAX \
-QCA_WLAN_VENDOR_ATTR_EXTSCAN_SUBCMD_CONFIG_PARAM_MAX
-#define PARAM_REQUEST_ID \
-QCA_WLAN_VENDOR_ATTR_EXTSCAN_SUBCMD_CONFIG_PARAM_REQUEST_ID
-#define PARAMS_LOST_SSID_SAMPLE_SIZE \
-QCA_WLAN_VENDOR_ATTR_EXTSCAN_SSID_HOTLIST_PARAMS_LOST_SSID_SAMPLE_SIZE
-#define PARAMS_NUM_SSID \
-QCA_WLAN_VENDOR_ATTR_EXTSCAN_SSID_HOTLIST_PARAMS_NUM_SSID
-#define THRESHOLD_PARAM \
-QCA_WLAN_VENDOR_ATTR_EXTSCAN_SSID_THRESHOLD_PARAM
-#define PARAM_SSID \
-QCA_WLAN_VENDOR_ATTR_EXTSCAN_SSID_THRESHOLD_PARAM_SSID
-#define PARAM_BAND \
-QCA_WLAN_VENDOR_ATTR_EXTSCAN_SSID_THRESHOLD_PARAM_BAND
-#define PARAM_RSSI_LOW \
-QCA_WLAN_VENDOR_ATTR_EXTSCAN_SSID_THRESHOLD_PARAM_RSSI_LOW
-#define PARAM_RSSI_HIGH \
-QCA_WLAN_VENDOR_ATTR_EXTSCAN_SSID_THRESHOLD_PARAM_RSSI_HIGH
-
-/**
- * __wlan_hdd_cfg80211_extscan_set_ssid_hotlist() - set ssid hot list
- * @wiphy: Pointer to wireless phy
- * @wdev: Pointer to wireless device
- * @data: Pointer to data
- * @data_len: Data length
- *
- * Return: 0 on success, negative errno on failure
- */
-static int
-__wlan_hdd_cfg80211_extscan_set_ssid_hotlist(struct wiphy *wiphy,
-                       struct wireless_dev *wdev,
-                       const void *data,
-                       int data_len)
-{
-    tSirEXTScanSetSsidHotListReqParams *request;
-    struct net_device *dev = wdev->netdev;
-    hdd_adapter_t *adapter = WLAN_HDD_GET_PRIV_PTR(dev);
-    hdd_context_t *hdd_ctx = wiphy_priv(wiphy);
-    struct nlattr *tb[PARAM_MAX + 1];
-    struct nlattr *tb2[PARAM_MAX + 1];
-    struct nlattr *ssids;
-    struct hdd_ext_scan_context *context;
-    uint32_t request_id;
-    char ssid_string[SIR_MAC_MAX_SSID_LENGTH + 1] = {'\0'};
-    int ssid_len;
-    int ssid_length;
-    eHalStatus status;
-    int i, rem, retval;
-    unsigned long rc;
-
-    ENTER();
-
-    if (VOS_FTM_MODE == hdd_get_conparam()) {
-        hddLog(LOGE, FL("Command not allowed in FTM mode"));
-        return -EINVAL;
-    }
-
-    retval = wlan_hdd_validate_context(hdd_ctx);
-    if (0 != retval) {
-        hddLog(LOGE, FL("HDD context is not valid"));
-        return -EINVAL;
-    }
-
-    /* check the EXTScan Capability */
-    if ( (TRUE != hdd_ctx->cfg_ini->fEnableEXTScan) ||
-         (TRUE != sme_IsFeatureSupportedByFW(EXTENDED_SCAN)) ||
-         (TRUE != sme_IsFeatureSupportedByFW(EXT_SCAN_ENHANCED)))
-    {
-        hddLog(VOS_TRACE_LEVEL_ERROR,
-               FL("EXTScan not enabled/supported by Firmware"));
-        return -EINVAL;
-    }
-
-    if (nla_parse(tb, PARAM_MAX,
-        data, data_len,
-              wlan_hdd_extscan_config_policy)) {
-        hddLog(LOGE, FL("Invalid ATTR"));
-        return -EINVAL;
-    }
-
-    request = vos_mem_malloc(sizeof(*request));
-    if (!request) {
-        hddLog(LOGE, FL("vos_mem_malloc failed"));
-        return -ENOMEM;
-    }
-
-    /* Parse and fetch request Id */
-    if (!tb[PARAM_REQUEST_ID]) {
-        hddLog(LOGE, FL("attr request id failed"));
-        goto fail;
-    }
-
-    request->request_id = nla_get_u32(tb[PARAM_REQUEST_ID]);
-    hddLog(LOG1, FL("Request Id %d"), request->request_id);
-
-    /* Parse and fetch lost SSID sample size */
-    if (!tb[PARAMS_LOST_SSID_SAMPLE_SIZE]) {
-        hddLog(LOGE, FL("attr number of Ssid failed"));
-        goto fail;
-    }
-    request->lost_ssid_sample_size =
-        nla_get_u32(tb[PARAMS_LOST_SSID_SAMPLE_SIZE]);
-    hddLog(LOG1, FL("Lost SSID Sample Size %d"),
-           request->lost_ssid_sample_size);
-
-    /* Parse and fetch number of hotlist SSID */
-    if (!tb[PARAMS_NUM_SSID]) {
-        hddLog(LOGE, FL("attr number of Ssid failed"));
-        goto fail;
-    }
-    request->ssid_count = nla_get_u32(tb[PARAMS_NUM_SSID]);
-    hddLog(LOG1, FL("Number of SSID %d"), request->ssid_count);
-
-    request->session_id = adapter->sessionId;
-    hddLog(LOG1, FL("Session Id (%d)"), request->session_id);
-
-    i = 0;
-    nla_for_each_nested(ssids, tb[THRESHOLD_PARAM], rem) {
-        if (i >= WLAN_EXTSCAN_MAX_HOTLIST_SSIDS) {
-            hddLog(LOGE,
-                   FL("Too Many SSIDs, %d exceeds %d"),
-                   i, WLAN_EXTSCAN_MAX_HOTLIST_SSIDS);
-            break;
-        }
-        if (nla_parse(tb2, PARAM_MAX,
-                  nla_data(ssids), nla_len(ssids),
-                  wlan_hdd_extscan_config_policy)) {
-            hddLog(LOGE, FL("nla_parse failed"));
-            goto fail;
-        }
-
-        /* Parse and fetch SSID */
-        if (!tb2[PARAM_SSID]) {
-            hddLog(LOGE, FL("attr ssid failed"));
-            goto fail;
-        }
-        ssid_length = nla_strlcpy(ssid_string, tb2[PARAM_SSID],
-                                  sizeof(ssid_string));
-        hddLog(LOG1, FL("SSID %s"),
-               ssid_string);
-        ssid_len = strlen(ssid_string);
-        if (ssid_length >= SIR_MAC_MAX_SSID_LENGTH) {
-                hddLog(LOGE, FL("Invalid ssid length"));
-                goto fail;
-        }
-        memcpy(request->ssid[i].ssid.ssId, ssid_string, ssid_len);
-        request->ssid[i].ssid.length = ssid_len;
-        request->ssid[i].ssid.ssId[ssid_len] = '\0';
-        hddLog(LOG1, FL("After copying SSID %s"),
-               request->ssid[i].ssid.ssId);
-        hddLog(LOG1, FL("After copying length: %d"),
-                        ssid_len);
-
-        /* Parse and fetch low RSSI */
-        if (!tb2[PARAM_BAND]) {
-            hddLog(LOGE, FL("attr band failed"));
-            goto fail;
-        }
-        request->ssid[i].band = nla_get_u8(tb2[PARAM_BAND]);
-        hddLog(LOG1, FL("band %d"), request->ssid[i].band);
-
-        /* Parse and fetch low RSSI */
-        if (!tb2[PARAM_RSSI_LOW]) {
-            hddLog(LOGE, FL("attr low RSSI failed"));
-            goto fail;
-        }
-        request->ssid[i].rssi_low = nla_get_s32(tb2[PARAM_RSSI_LOW]);
-        hddLog(LOG1, FL("RSSI low %d"), request->ssid[i].rssi_low);
-
-        /* Parse and fetch high RSSI */
-        if (!tb2[PARAM_RSSI_HIGH]) {
-            hddLog(LOGE, FL("attr high RSSI failed"));
-            goto fail;
-        }
-        request->ssid[i].rssi_high = nla_get_u32(tb2[PARAM_RSSI_HIGH]);
-        hddLog(LOG1, FL("RSSI high %d"), request->ssid[i].rssi_high);
-        i++;
-    }
-
-    context = &hdd_ctx->ext_scan_context;
-    spin_lock(&hdd_context_lock);
-    INIT_COMPLETION(context->response_event);
-    context->request_id = request_id = request->request_id;
-    spin_unlock(&hdd_context_lock);
-
-    status = sme_set_ssid_hotlist(hdd_ctx->hHal, request);
-    if (!HAL_STATUS_SUCCESS(status)) {
-        hddLog(LOGE,
-               FL("sme_set_ssid_hotlist failed(err=%d)"), status);
-        goto fail;
-    }
-
-    vos_mem_free(request);
-
-    /* request was sent -- wait for the response */
-    rc = wait_for_completion_timeout(&context->response_event,
-                      msecs_to_jiffies
-                         (WLAN_WAIT_TIME_EXTSCAN));
-    if (!rc) {
-        hddLog(LOGE, FL("sme_set_ssid_hotlist timed out"));
-        retval = -ETIMEDOUT;
-    } else {
-        spin_lock(&hdd_context_lock);
-        if (context->request_id == request_id)
-            retval = context->response_status;
-        else
-            retval = -EINVAL;
-        spin_unlock(&hdd_context_lock);
-    }
-
-    return retval;
-
-fail:
-    vos_mem_free(request);
-    return -EINVAL;
-}
-
-/*
- * done with short names for the global vendor params
- * used by wlan_hdd_cfg80211_extscan_set_ssid_hotlist()
- */
-#undef PARAM_MAX
-#undef PARAM_REQUEST_ID
-#undef PARAMS_NUM_SSID
-#undef THRESHOLD_PARAM
-#undef PARAM_SSID
-#undef PARAM_BAND
-#undef PARAM_RSSI_LOW
-#undef PARAM_RSSI_HIGH
-
-static int wlan_hdd_cfg80211_extscan_set_ssid_hotlist(struct wiphy *wiphy,
-                                        struct wireless_dev *wdev,
-                                        const void *data, int dataLen)
-{
-   int ret = 0;
-
-   vos_ssr_protect(__func__);
-   ret = __wlan_hdd_cfg80211_extscan_set_ssid_hotlist(wiphy, wdev, data,
-                                                       dataLen);
-   vos_ssr_unprotect(__func__);
-
-   return ret;
-}
-
-static int
-__wlan_hdd_cfg80211_extscan_reset_ssid_hotlist(struct wiphy *wiphy,
-                         struct wireless_dev *wdev,
-                         const void *data,
-                         int data_len)
-{
-    tSirEXTScanResetSsidHotlistReqParams request;
-    struct net_device *dev = wdev->netdev;
-    hdd_adapter_t *adapter = WLAN_HDD_GET_PRIV_PTR(dev);
-    hdd_context_t *hdd_ctx = wiphy_priv(wiphy);
-    struct nlattr *tb[QCA_WLAN_VENDOR_ATTR_EXTSCAN_SUBCMD_CONFIG_PARAM_MAX + 1];
-    struct hdd_ext_scan_context *context;
-    uint32_t request_id;
-    eHalStatus status;
-    int retval;
-    unsigned long rc;
-
-    ENTER();
-
-    if (VOS_FTM_MODE == hdd_get_conparam()) {
-        hddLog(LOGE, FL("Command not allowed in FTM mode"));
-        return -EINVAL;
-    }
-
-    retval = wlan_hdd_validate_context(hdd_ctx);
-    if (0 != retval) {
-        hddLog(LOGE, FL("HDD context is not valid"));
-        return -EINVAL;
-    }
-
-    /* check the EXTScan Capability */
-    if ( (TRUE != hdd_ctx->cfg_ini->fEnableEXTScan) ||
-         (TRUE != sme_IsFeatureSupportedByFW(EXTENDED_SCAN)) ||
-         (TRUE != sme_IsFeatureSupportedByFW(EXT_SCAN_ENHANCED)))
-    {
-        hddLog(LOGE,
-               FL("EXTScan not enabled/supported by Firmware"));
-        return -EINVAL;
-    }
-
-    if (nla_parse(tb, QCA_WLAN_VENDOR_ATTR_EXTSCAN_SUBCMD_CONFIG_PARAM_MAX,
-        data, data_len,
-               wlan_hdd_extscan_config_policy)) {
-        hddLog(LOGE, FL("Invalid ATTR"));
-        return -EINVAL;
-    }
-
-    /* Parse and fetch request Id */
-    if (!tb[QCA_WLAN_VENDOR_ATTR_EXTSCAN_SUBCMD_CONFIG_PARAM_REQUEST_ID]) {
-        hddLog(LOGE, FL("attr request id failed"));
-        return -EINVAL;
-    }
-
-    request.requestId = nla_get_u32(
-            tb[QCA_WLAN_VENDOR_ATTR_EXTSCAN_SUBCMD_CONFIG_PARAM_REQUEST_ID]);
-    request.sessionId = adapter->sessionId;
-    hddLog(LOG1, FL("Request Id %d Session Id %d"), request.requestId,
-           request.sessionId);
-
-    context = &hdd_ctx->ext_scan_context;
-    spin_lock(&hdd_context_lock);
-    INIT_COMPLETION(context->response_event);
-    context->request_id = request_id = request.requestId;
-    spin_unlock(&hdd_context_lock);
-
-    status = sme_reset_ssid_hotlist(hdd_ctx->hHal, &request);
-    if (!HAL_STATUS_SUCCESS(status)) {
-        hddLog(LOGE,
-               FL("sme_reset_ssid_hotlist failed(err=%d)"), status);
-        return -EINVAL;
-    }
-
-    /* request was sent -- wait for the response */
-    rc = wait_for_completion_timeout(&context->response_event,
-                     msecs_to_jiffies
-                     (WLAN_WAIT_TIME_EXTSCAN));
-    if (!rc) {
-        hddLog(LOGE, FL("sme_reset_ssid_hotlist timed out"));
-        retval = -ETIMEDOUT;
-    } else {
-        spin_lock(&hdd_context_lock);
-        if (context->request_id == request_id)
-            retval = context->response_status;
-        else
-            retval = -EINVAL;
-        spin_unlock(&hdd_context_lock);
-    }
-
-    return retval;
-}
-
-static int
-wlan_hdd_cfg80211_extscan_reset_ssid_hotlist(struct wiphy *wiphy,
-                     struct wireless_dev *wdev,
-                     const void *data,
-                     int data_len)
-{
-    int ret;
-
-    vos_ssr_protect(__func__);
-    ret = __wlan_hdd_cfg80211_extscan_reset_ssid_hotlist(wiphy, wdev,
-                            data, data_len);
-    vos_ssr_unprotect(__func__);
-
-    return ret;
-}
-
 static int __wlan_hdd_cfg80211_extscan_get_valid_channels(struct wiphy *wiphy,
                                         struct wireless_dev *wdev,
                                         const void *data, int dataLen)
@@ -8073,22 +7493,6 @@ const struct wiphy_vendor_command hdd_wiphy_vendor_commands[] =
                  WIPHY_VENDOR_CMD_NEED_RUNNING,
         .doit = wlan_hdd_cfg80211_extscan_reset_bssid_hotlist
     },
-    {
-        .info.vendor_id = QCA_NL80211_VENDOR_ID,
-        .info.subcmd = QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_SET_SSID_HOTLIST,
-        .flags = WIPHY_VENDOR_CMD_NEED_WDEV |
-                 WIPHY_VENDOR_CMD_NEED_NETDEV |
-                 WIPHY_VENDOR_CMD_NEED_RUNNING,
-        .doit = wlan_hdd_cfg80211_extscan_set_ssid_hotlist
-    },
-    {
-        .info.vendor_id = QCA_NL80211_VENDOR_ID,
-        .info.subcmd = QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_RESET_SSID_HOTLIST,
-        .flags = WIPHY_VENDOR_CMD_NEED_WDEV |
-                 WIPHY_VENDOR_CMD_NEED_NETDEV |
-                 WIPHY_VENDOR_CMD_NEED_RUNNING,
-        .doit = wlan_hdd_cfg80211_extscan_reset_ssid_hotlist
-    },
 #endif /* WLAN_FEATURE_EXTSCAN */
 /*EXT TDLS*/
     {
@@ -8325,22 +7729,6 @@ struct nl80211_vendor_cmd_info wlan_hdd_cfg80211_vendor_events[] =
         .vendor_id = QCA_NL80211_VENDOR_ID,
         .subcmd = QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_RESET_BSSID_HOTLIST
     },
-    {
-        .vendor_id = QCA_NL80211_VENDOR_ID,
-        .subcmd = QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_SET_SSID_HOTLIST
-    },
-    {
-        .vendor_id = QCA_NL80211_VENDOR_ID,
-        .subcmd = QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_RESET_SSID_HOTLIST
-    },
-    [QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_FOUND_INDEX] = {
-        .vendor_id = QCA_NL80211_VENDOR_ID,
-        .subcmd = QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_FOUND
-    },
-    [QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_LOST_INDEX] = {
-        .vendor_id = QCA_NL80211_VENDOR_ID,
-        .subcmd = QCA_NL80211_VENDOR_SUBCMD_EXTSCAN_HOTLIST_SSID_LOST
-    },
 #endif /* WLAN_FEATURE_EXTSCAN */
 /*EXT TDLS*/
     {
diff --git a/CORE/MAC/inc/sirApi.h b/CORE/MAC/inc/sirApi.h
index df39309..48c7f18 100644
--- a/CORE/MAC/inc/sirApi.h
+++ b/CORE/MAC/inc/sirApi.h
@@ -143,7 +143,6 @@ typedef tANI_U8 tSirVersionString[SIR_VERSION_STRING_LEN];
 #define WLAN_EXTSCAN_MAX_BUCKETS                  16
 #define WLAN_EXTSCAN_MAX_HOTLIST_APS              128
 #define WLAN_EXTSCAN_MAX_RSSI_SAMPLE_SIZE     8
-#define WLAN_EXTSCAN_MAX_HOTLIST_SSIDS            8
 #endif /* WLAN_FEATURE_EXTSCAN */
 
 #define WLAN_DISA_MAX_PAYLOAD_SIZE                1600
@@ -5707,22 +5706,6 @@ typedef PACKED_PRE struct PACKED_POST
     tANI_U8 result[1];
 } tSirWifiScanResultEvent, *tpSirWifiScanResultEvent;
 
-/* WLAN_HAL_SSID_HOTLIST_RESULT_IND */
-
-typedef PACKED_PRE struct PACKED_POST
-{
-    tANI_U32             requestId;
-    tANI_BOOLEAN         ssid_found;
-    tANI_U32             numHotlistSsid;     // numbers of SSIDs
-
-    /*
-     * 0 for last fragment
-     * 1 still more fragment(s) coming
-     */
-    tANI_BOOLEAN         moreData;
-    tSirWifiScanResult   ssidHotlist[1];
-} tSirEXTScanSsidHotlistMatch, *tpSirEXTScanSsidHotlistMatch;
-
 typedef PACKED_PRE struct PACKED_POST
 {
     tANI_U8       elemId;       // Element Identifier
@@ -5852,49 +5835,6 @@ typedef PACKED_PRE struct PACKED_POST
     tANI_U32      status;
 } tSirEXTScanResetBssidHotlistRspParams, *tpSirEXTScanResetBssidHotlistRspParams;
 
-typedef struct
-{
-    tANI_U32      requestId;
-    tANI_U8       sessionId;
-} tSirEXTScanResetSsidHotlistReqParams, *tpSirEXTScanResetSsidHotlistReqParams;
-
-typedef PACKED_PRE struct PACKED_POST
-{
-    tANI_U32      requestId;
-    tANI_U32      status;
-} tSirEXTScanResetSsidHotlistRspParams, *tpSirEXTScanResetSsidHotlistRspParams;
-
-
-/**
- * struct sir_ssid_hotlist_param - param for SSID Hotlist
- * @ssid: SSID which is being hotlisted
- * @band: Band in which the given SSID should be scanned
- * @rssi_low: Low bound on RSSI
- * @rssi_high: High bound on RSSI
- */
-typedef struct
-{
-    tSirMacSSid ssid;
-    tANI_U8 band;
-    tANI_S32 rssi_low;
-    tANI_S32 rssi_high;
-}tSirSsidThresholdParam, *tpSirSsidThresholdParam;
-
-typedef struct
-{
-    tANI_U32 request_id;
-    tANI_U8  session_id;
-    tANI_U32 lost_ssid_sample_size;
-    tANI_U32 ssid_count;
-    tSirSsidThresholdParam ssid[WLAN_EXTSCAN_MAX_HOTLIST_SSIDS];
-}tSirEXTScanSetSsidHotListReqParams, *tpSirEXTScanSetSsidHotListReqParams;
-
-typedef PACKED_PRE struct PACKED_POST
-{
-    tANI_U32      requestId;
-    tANI_U32      status;
-} tSirEXTScanSetSsidHotListRspParams, *tpSirEXTScanSetSsidHotListRspParams;
-
 /*---------------------------------------------------------------------------
  *  * WLAN_HAL_EXTSCAN_RESULT_AVAILABLE_IND
  *  *-------------------------------------------------------------------------*/
diff --git a/CORE/SME/inc/sme_Api.h b/CORE/SME/inc/sme_Api.h
index 5817358..5d4a807 100644
--- a/CORE/SME/inc/sme_Api.h
+++ b/CORE/SME/inc/sme_Api.h
@@ -293,27 +293,6 @@ eHalStatus sme_SetBssHotlist (tHalHandle hHal,
 eHalStatus sme_ResetBssHotlist (tHalHandle hHal,
                               tSirEXTScanResetBssidHotlistReqParams *pResetReq);
 
-/**
- * sme_set_ssid_hotlist() - Set the SSID hotlist
- * @hal: SME handle
- * @request: set ssid hotlist request
- *
- * Return: eHalStatus
- */
-eHalStatus sme_set_ssid_hotlist(tHalHandle hal,
-             tSirEXTScanSetSsidHotListReqParams *request);
-
-/* ---------------------------------------------------------------------------
-    \fn sme_ResetBssHotlist
-    \brief  SME API to reset BSSID hotlist
-    \param  hHal
-    \param  pSetHotListReq: Extented Scan set hotlist structure
-    \- return eHalStatus
-    -------------------------------------------------------------------------*/
-eHalStatus sme_reset_ssid_hotlist (tHalHandle hHal,
-                              tSirEXTScanResetSsidHotlistReqParams *pResetReq);
-
-
 /* ---------------------------------------------------------------------------
     \fn sme_getCachedResults
     \brief  SME API to get cached results
diff --git a/CORE/SME/src/sme_common/sme_Api.c b/CORE/SME/src/sme_common/sme_Api.c
index 6014a6f..7b4bb2c 100644
--- a/CORE/SME/src/sme_common/sme_Api.c
+++ b/CORE/SME/src/sme_common/sme_Api.c
@@ -13528,117 +13528,6 @@ eHalStatus sme_ResetBssHotlist (tHalHandle hHal,
     return(status);
 }
 
-/**
- * sme_set_ssid_hotlist() - Set the SSID hotlist
- * @hal: SME handle
- * @request: set ssid hotlist request
- *
- * Return: eHalStatus
- */
-eHalStatus
-sme_set_ssid_hotlist(tHalHandle hal,
-             tSirEXTScanSetSsidHotListReqParams *request)
-{
-    eHalStatus status;
-    VOS_STATUS vstatus;
-    tpAniSirGlobal mac = PMAC_STRUCT(hal);
-    vos_msg_t vos_message;
-    tSirEXTScanSetSsidHotListReqParams *set_req;
-    int i;
-
-    set_req = vos_mem_malloc(sizeof(*set_req));
-    if (!set_req) {
-        VOS_TRACE(VOS_MODULE_ID_SME, VOS_TRACE_LEVEL_ERROR,
-              "%s: Not able to allocate memory for WDA_EXTSCAN_SET_SSID_HOTLIST_REQ",
-              __func__);
-        return eHAL_STATUS_FAILURE;
-    }
-
-    *set_req = *request;
-
-
-
-   for( i = 0; i < set_req->ssid_count; i++){
-
-        VOS_TRACE(VOS_MODULE_ID_SME, VOS_TRACE_LEVEL_ERROR,
-         "%s: SSID %s \n length: %d",
-              __func__, set_req->ssid[i].ssid.ssId, set_req->ssid[i].ssid.length);
-  }
-
-     MTRACE(vos_trace(VOS_MODULE_ID_SME,
-            TRACE_CODE_SME_RX_HDD_EXTSCAN_SET_SSID_HOTLIST, NO_SESSION, 0));
-
-    status = sme_AcquireGlobalLock(&mac->sme);
-    if (eHAL_STATUS_SUCCESS == status) {
-        /* Serialize the req through MC thread */
-        vos_message.bodyptr = set_req;
-        vos_message.type    = WDA_EXTSCAN_SET_SSID_HOTLIST_REQ;
-        vstatus = vos_mq_post_message(VOS_MQ_ID_WDA, &vos_message);
-        sme_ReleaseGlobalLock(&mac->sme);
-        if (!VOS_IS_STATUS_SUCCESS(vstatus)) {
-            vos_mem_free(set_req);
-            status = eHAL_STATUS_FAILURE;
-        }
-    } else {
-      VOS_TRACE(VOS_MODULE_ID_SME, VOS_TRACE_LEVEL_ERROR,
-            "%s: sme_AcquireGlobalLock error", __func__);
-        vos_mem_free(set_req);
-        status = eHAL_STATUS_FAILURE;
-    }
-    return status;
-}
-
-/**
- * sme_reset_ssid_hotlist() - Set the SSID hotlist
- * @hal: SME handle
- * @request: reset ssid hotlist request
- *
- * Return: eHalStatus
- */
-eHalStatus
-sme_reset_ssid_hotlist(tHalHandle hal,
-        tSirEXTScanResetSsidHotlistReqParams *request)
-{
-    eHalStatus status;
-    VOS_STATUS vstatus;
-    tpAniSirGlobal mac = PMAC_STRUCT(hal);
-    vos_msg_t vos_message;
-    tSirEXTScanResetSsidHotlistReqParams *set_req;
-
-    set_req = vos_mem_malloc(sizeof(*set_req));
-    if (!set_req) {
-        VOS_TRACE(VOS_MODULE_ID_SME, VOS_TRACE_LEVEL_ERROR,
-                "%s: Not able to allocate memory for WDA_EXTSCAN_SET_SSID_HOTLIST_REQ",
-                __func__);
-        return eHAL_STATUS_FAILURE;
-    }
-
-    *set_req = *request;
-
-    MTRACE(vos_trace(VOS_MODULE_ID_SME,
-            TRACE_CODE_SME_RX_HDD_EXTSCAN_RESET_SSID_HOTLIST, NO_SESSION, 0));
-
-    status = sme_AcquireGlobalLock(&mac->sme);
-    if (eHAL_STATUS_SUCCESS == status) {
-        /* Serialize the req through MC thread */
-        vos_message.bodyptr = set_req;
-        vos_message.type    = WDA_EXTSCAN_RESET_SSID_HOTLIST_REQ;
-        vstatus = vos_mq_post_message(VOS_MQ_ID_WDA, &vos_message);
-        sme_ReleaseGlobalLock(&mac->sme);
-        if (!VOS_IS_STATUS_SUCCESS(vstatus)) {
-            vos_mem_free(set_req);
-            status = eHAL_STATUS_FAILURE;
-        }
-    } else {
-        VOS_TRACE(VOS_MODULE_ID_SME, VOS_TRACE_LEVEL_ERROR,
-                 "%s: sme_AcquireGlobalLock error", __func__);
-        vos_mem_free(set_req);
-        status = eHAL_STATUS_FAILURE;
-    }
-    return status;
-}
-
-
 /* ---------------------------------------------------------------------------
     \fn sme_getCachedResults
     \brief  SME API to get cached results
diff --git a/CORE/WDA/src/wlan_qct_wda.c b/CORE/WDA/src/wlan_qct_wda.c
index a7ea56f..ee21e61 100644
--- a/CORE/WDA/src/wlan_qct_wda.c
+++ b/CORE/WDA/src/wlan_qct_wda.c
@@ -254,10 +254,6 @@ VOS_STATUS WDA_ProcessEXTScanSetBSSIDHotlistReq(tWDA_CbContext *pWDA,
                             tSirEXTScanSetBssidHotListReqParams *wdaRequest);
 VOS_STATUS WDA_ProcessEXTScanResetBSSIDHotlistReq(tWDA_CbContext *pWDA,
                             tSirEXTScanResetBssidHotlistReqParams *wdaRequest);
-VOS_STATUS WDA_ProcessEXTScanSetSSIDHotlistReq(tWDA_CbContext *pWDA,
-                            tSirEXTScanSetSsidHotListReqParams *wdaRequest);
-VOS_STATUS WDA_ProcessEXTScanResetSSIDHotlistReq(tWDA_CbContext *pWDA,
-                            tSirEXTScanResetSsidHotlistReqParams *wdaRequest);
 VOS_STATUS WDA_ProcessHighPriorityDataInfoInd(tWDA_CbContext *pWDA,
                             tSirHighPriorityDataInfoInd *wdaRequest);
 #endif /* WLAN_FEATURE_EXTSCAN */
@@ -17174,18 +17170,6 @@ VOS_STATUS WDA_McProcessMsg( v_CONTEXT_t pVosContext, vos_msg_t *pMsg )
                         (tSirEXTScanResetBssidHotlistReqParams *)pMsg->bodyptr);
          break;
       }
-     case WDA_EXTSCAN_SET_SSID_HOTLIST_REQ:
-      {
-         WDA_ProcessEXTScanSetSSIDHotlistReq(pWDA,
-                         (tSirEXTScanSetSsidHotListReqParams *)pMsg->bodyptr);
-         break;
-      }
-      case WDA_EXTSCAN_RESET_SSID_HOTLIST_REQ:
-      {
-         WDA_ProcessEXTScanResetSSIDHotlistReq(pWDA,
-                        (tSirEXTScanResetSsidHotlistReqParams *)pMsg->bodyptr);
-         break;
-      }
       case WDA_HIGH_PRIORITY_DATA_INFO_IND:
       {
          WDA_ProcessHighPriorityDataInfoInd(pWDA,
@@ -18474,7 +18458,6 @@ void WDA_lowLevelIndCallback(WDI_LowLevelIndType *wdiLowLevelInd,
      case  WDI_EXTSCAN_SCAN_AVAILABLE_IND:
      case  WDI_EXTSCAN_SCAN_RESULT_IND:
      case  WDI_EXTSCAN_BSSID_HOTLIST_RESULT_IND:
-     case  WDI_EXTSCAN_SSID_HOTLIST_RESULT_IND:
      {
          void *pEXTScanData;
          void *pCallbackContext;
@@ -18521,14 +18504,6 @@ void WDA_lowLevelIndCallback(WDI_LowLevelIndType *wdiLowLevelInd,
              VOS_TRACE(VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_INFO,
               "WDI_EXTSCAN Indication is WDI_EXTSCAN_BSSID_HOTLIST_RESULT_IND");
          }
-         if (wdiLowLevelInd->wdiIndicationType ==
-                 WDI_EXTSCAN_SSID_HOTLIST_RESULT_IND)
-         {
-             indType = WDA_EXTSCAN_SSID_HOTLIST_RESULT_IND;
-
-             VOS_TRACE(VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_INFO,
-              "WDI_EXTSCAN Indication is WDI_EXTSCAN_SSID_HOTLIST_RESULT_IND");
-         }
 
          pEXTScanData =
             (void *)wdiLowLevelInd->wdiIndicationData.pEXTScanIndData;
@@ -22063,160 +22038,6 @@ error:
 }
 
 /*==========================================================================
-  FUNCTION   WDA_EXTScanSetSSIDHotlistRspCallback
-
-  DESCRIPTION
-    API to send EXTScan Set SSID Hotlist Response to HDD
-
-  PARAMETERS
-    pEventData: Response from FW
-   pUserData:
-===========================================================================*/
-void WDA_EXTScanSetSSIDHotlistRspCallback(void *pEventData, void* pUserData)
-{
-    tWDA_ReqParams *pWdaParams = (tWDA_ReqParams *)pUserData;
-    tWDA_CbContext *pWDA = NULL;
-    void *pCallbackContext;
-    tpAniSirGlobal pMac;
-
-    VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_INFO,
-            "%s: ", __func__);
-    if (NULL == pWdaParams)
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s: pWdaParams received NULL", __func__);
-        VOS_ASSERT(0) ;
-        return;
-    }
-
-    pWDA = (tWDA_CbContext *) pWdaParams->pWdaContext;
-
-    if (NULL == pWDA)
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s: pWDA received NULL", __func__);
-        VOS_ASSERT(0);
-        goto error;
-    }
-
-    pMac = (tpAniSirGlobal )VOS_GET_MAC_CTXT(pWDA->pVosContext);
-    if (NULL == pMac)
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s:pMac is NULL", __func__);
-        VOS_ASSERT(0);
-        goto error;
-    }
-
-    pCallbackContext = pMac->sme.pEXTScanCallbackContext;
-
-    if (pMac->sme.pEXTScanIndCb)
-    {
-        pMac->sme.pEXTScanIndCb(pCallbackContext,
-                WDA_EXTSCAN_SET_SSID_HOTLIST_RSP,
-                pEventData);
-    }
-    else
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s:HDD callback is null", __func__);
-        VOS_ASSERT(0);
-    }
-
-
-error:
-
-    if (pWdaParams->wdaWdiApiMsgParam != NULL)
-    {
-        vos_mem_free(pWdaParams->wdaWdiApiMsgParam);
-    }
-    if (pWdaParams->wdaMsgParam != NULL)
-    {
-        vos_mem_free(pWdaParams->wdaMsgParam);
-    }
-    vos_mem_free(pWdaParams) ;
-
-    return;
-}
-
-/*==========================================================================
-  FUNCTION   WDA_EXTScanResetSSIDHotlistRspCallback
-
-  DESCRIPTION
-    API to send EXTScan ReSet SSID Hotlist Response to HDD
-
-  PARAMETERS
-    pEventData: Response from FW
-   pUserData:
-===========================================================================*/
-void WDA_EXTScanResetSSIDHotlistRspCallback(void *pEventData, void* pUserData)
-{
-    tWDA_ReqParams *pWdaParams = (tWDA_ReqParams *)pUserData;
-    tWDA_CbContext *pWDA = NULL;
-    void *pCallbackContext;
-    tpAniSirGlobal pMac;
-
-    VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_INFO,
-            "%s:", __func__);
-    if (NULL == pWdaParams)
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s: pWdaParams received NULL", __func__);
-        VOS_ASSERT(0) ;
-        return;
-    }
-
-    pWDA = (tWDA_CbContext *) pWdaParams->pWdaContext;
-
-    if (NULL == pWDA)
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s: pWDA received NULL", __func__);
-        VOS_ASSERT(0);
-        goto error;
-    }
-
-    pMac = (tpAniSirGlobal )VOS_GET_MAC_CTXT(pWDA->pVosContext);
-    if (NULL == pMac)
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s:pMac is NULL", __func__);
-        VOS_ASSERT(0);
-        goto error;
-    }
-
-    pCallbackContext = pMac->sme.pEXTScanCallbackContext;
-
-    if (pMac->sme.pEXTScanIndCb)
-    {
-        pMac->sme.pEXTScanIndCb(pCallbackContext,
-                WDA_EXTSCAN_RESET_SSID_HOTLIST_RSP,
-                pEventData);
-    }
-    else
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s:HDD callback is null", __func__);
-        VOS_ASSERT(0);
-    }
-
-
-error:
-
-    if (pWdaParams->wdaWdiApiMsgParam != NULL)
-    {
-        vos_mem_free(pWdaParams->wdaWdiApiMsgParam);
-    }
-    if (pWdaParams->wdaMsgParam != NULL)
-    {
-        vos_mem_free(pWdaParams->wdaMsgParam);
-    }
-    vos_mem_free(pWdaParams) ;
-
-    return;
-}
-
-/*==========================================================================
   FUNCTION   WDA_ProcessEXTScanStartReq
 
   DESCRIPTION
@@ -22475,92 +22296,6 @@ VOS_STATUS WDA_ProcessEXTScanResetBSSIDHotlistReq(tWDA_CbContext *pWDA,
 }
 
 /*==========================================================================
-  FUNCTION   WDA_ProcessEXTScanSetSSIDHotlistReq
-
-  DESCRIPTION
-    API to send Set SSID Hotlist Request to WDI
-
-  PARAMETERS
-    pWDA: Pointer to WDA context
-    wdaRequest: Pointer to EXTScan req parameters
-===========================================================================*/
-VOS_STATUS WDA_ProcessEXTScanSetSSIDHotlistReq(tWDA_CbContext *pWDA,
-        tSirEXTScanSetSsidHotListReqParams *wdaRequest)
-{
-    WDI_Status status = WDI_STATUS_SUCCESS;
-    tWDA_ReqParams *pWdaParams;
-
-    VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_INFO,
-            "%s: ", __func__);
-    pWdaParams = (tWDA_ReqParams *)vos_mem_malloc(sizeof(tWDA_ReqParams));
-    if (NULL == pWdaParams)
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s: VOS MEM Alloc Failure", __func__);
-        VOS_ASSERT(0);
-        return VOS_STATUS_E_NOMEM;
-    }
-    pWdaParams->pWdaContext = pWDA;
-    pWdaParams->wdaMsgParam = wdaRequest;
-    pWdaParams->wdaWdiApiMsgParam = NULL;
-
-    status = WDI_EXTScanSetSSIDHotlistReq((void *)wdaRequest,
-         (WDI_EXTScanSetSSIDHotlistRspCb)WDA_EXTScanSetSSIDHotlistRspCallback,
-            (void *)pWdaParams);
-    if (IS_WDI_STATUS_FAILURE(status))
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "Failure to request.  Free all the memory " );
-        vos_mem_free(pWdaParams->wdaMsgParam);
-        vos_mem_free(pWdaParams);
-    }
-    return CONVERT_WDI2VOS_STATUS(status);
-}
-
-/*==========================================================================
-  FUNCTION   WDA_ProcessEXTScanReSetSSIDHotlistReq
-
-  DESCRIPTION
-    API to send Reset SSID Hotlist Request to WDI
-
-  PARAMETERS
-    pWDA: Pointer to WDA context
-    wdaRequest: Pointer to EXTScan req parameters
-===========================================================================*/
-VOS_STATUS WDA_ProcessEXTScanResetSSIDHotlistReq(tWDA_CbContext *pWDA,
-        tSirEXTScanResetSsidHotlistReqParams *wdaRequest)
-{
-    WDI_Status status = WDI_STATUS_SUCCESS;
-    tWDA_ReqParams *pWdaParams;
-
-    VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_INFO,
-            "%s:", __func__);
-    pWdaParams = (tWDA_ReqParams *)vos_mem_malloc(sizeof(tWDA_ReqParams));
-    if (NULL == pWdaParams)
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "%s: VOS MEM Alloc Failure", __func__);
-        VOS_ASSERT(0);
-        return VOS_STATUS_E_NOMEM;
-    }
-    pWdaParams->pWdaContext = pWDA;
-    pWdaParams->wdaMsgParam = wdaRequest;
-    pWdaParams->wdaWdiApiMsgParam = NULL;
-
-    status = WDI_EXTScanResetSSIDHotlistReq((void *)wdaRequest,
-     (WDI_EXTScanResetSSIDHotlistRspCb)WDA_EXTScanResetSSIDHotlistRspCallback,
-            (void *)pWdaParams);
-    if (IS_WDI_STATUS_FAILURE(status))
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDA, VOS_TRACE_LEVEL_ERROR,
-                "Failure to request.  Free all the memory " );
-        vos_mem_free(pWdaParams->wdaMsgParam);
-        vos_mem_free(pWdaParams);
-    }
-    return CONVERT_WDI2VOS_STATUS(status);
-}
-
-/*==========================================================================
   FUNCTION   WDA_ProcessHighPriorityDataInfoInd
 
   DESCRIPTION
diff --git a/CORE/WDI/CP/inc/wlan_qct_wdi.h b/CORE/WDI/CP/inc/wlan_qct_wdi.h
index 8c745d9..2d1a3a9 100644
--- a/CORE/WDI/CP/inc/wlan_qct_wdi.h
+++ b/CORE/WDI/CP/inc/wlan_qct_wdi.h
@@ -421,7 +421,6 @@ typedef enum
   WDI_EXTSCAN_SCAN_RESULT_IND,
   WDI_EXTSCAN_GET_CAPABILITIES_IND,
   WDI_EXTSCAN_BSSID_HOTLIST_RESULT_IND,
-  WDI_EXTSCAN_SSID_HOTLIST_RESULT_IND,
 #endif
   /*Delete BA Ind*/
   WDI_DEL_BA_IND,
@@ -6132,7 +6131,6 @@ typedef struct
 #define WDI_WLAN_EXTSCAN_MAX_CHANNELS                 16
 #define WDI_WLAN_EXTSCAN_MAX_BUCKETS                  16
 #define WDI_WLAN_EXTSCAN_MAX_HOTLIST_APS              128
-#define WDI_WLAN_EXTSCAN_MAX_HOTLIST_SSID             8
 
 typedef enum
 {
@@ -6240,14 +6238,6 @@ typedef struct
 
 typedef struct
 {
-   WDI_MacSSid  ssid;     /* SSID */
-   wpt_uint8 band;    /* band */
-   wpt_int32 lowRssiThreshold; /* low threshold */
-   wpt_int32 highRssiThreshold; /* high threshold */
-} WDI_SSIDThresholdParam;
-
-typedef struct
-{
     wpt_int32   requestId;
     wpt_int8    sessionId;    // session Id mapped to vdev_id
     wpt_uint32  lostBssidSampleSize;
@@ -6267,21 +6257,6 @@ typedef struct
     wpt_uint32 reserved;
 } WDI_HighPriorityDataInfoIndParams;
 
-typedef struct
-{
-    wpt_int32   requestId;
-    wpt_int8    sessionId;    // session Id mapped to vdev_id
-    wpt_uint32  lostSsidSampleSize;
-    wpt_uint32   numSsid;        // number of hotlist APs
-    WDI_SSIDThresholdParam   ssid[WDI_WLAN_EXTSCAN_MAX_HOTLIST_SSID]; // hotlist SSIDs
-} WDI_EXTScanSetSSIDHotlistReqParams;
-
-typedef struct
-{
-    wpt_uint32    requestId;
-    wpt_uint8     sessionId;
-} WDI_EXTScanResetSSIDHotlistReqParams;
-
 #endif /* WLAN_FEATURE_EXTSCAN */
 
 #ifdef WLAN_FEATURE_LINK_LAYER_STATS
@@ -8610,10 +8585,8 @@ typedef void  (*WDI_EXTScanSetBSSIDHotlistRspCb)(void *pEventData,
                                        void *pUserData);
 typedef void  (*WDI_EXTScanResetBSSIDHotlistRspCb)(void *pEventData,
                                        void *pUserData);
-typedef void  (*WDI_EXTScanSetSSIDHotlistRspCb)(void *pEventData,
-                                       void *pUserData);
-typedef void  (*WDI_EXTScanResetSSIDHotlistRspCb)(void *pEventData,
-                                       void *pUserData);
+
+
 #endif /* WLAN_FEATURE_EXTSCAN */
 
 #ifdef WLAN_FEATURE_LINK_LAYER_STATS
@@ -12079,40 +12052,6 @@ WDI_Status WDI_EXTScanResetBSSIDHotlistReq
 );
 
 /**
- @brief WDI_EXTScanSetSSIDHotlistReq
-    This API is called to send Set SSID Hotlist Request FW
-
- @param pwdiEXTScanSetBssidHotlistReqParams : pointer to the request params.
-        wdiEXTScanSetBSSIDHotlistRspCb   : callback on getting the response.
-        usrData : Client context
- @see
- @return SUCCESS or FAIL
-*/
-WDI_Status WDI_EXTScanSetSSIDHotlistReq
-(
-   WDI_EXTScanSetSSIDHotlistReqParams* pwdiEXTScanSetSSIDHotlistReqParams,
-   WDI_EXTScanSetSSIDHotlistRspCb     wdiEXTScanSetSSIDHotlistRspCb,
-   void*                   pUserData
-);
-
-/**
- @brief WDI_EXTScanResetSSIDHotlistReq
-    This API is called to send Reset SSID Hotlist Request FW
-
- @param pwdiEXTScanResetSsidHotlistReqParams : pointer to the request params.
-        wdiEXTScanGetCachedResultsRspCb   : callback on getting the response.
-        usrData : Client context
- @see
- @return SUCCESS or FAIL
-*/
-WDI_Status WDI_EXTScanResetSSIDHotlistReq
-(
-   WDI_EXTScanResetSSIDHotlistReqParams* pwdiEXTScanResetSSIDHotlistReqParams,
-   WDI_EXTScanResetSSIDHotlistRspCb     wdiEXTScanResetSSIDHotlistRspCb,
-   void*                   pUserData
-);
-
-/**
  @brief WDI_HighPriorityDataInfoInd
 
  @param pHighPriorityDataInfoIndParams: Req parameter for the FW
diff --git a/CORE/WDI/CP/inc/wlan_qct_wdi_i.h b/CORE/WDI/CP/inc/wlan_qct_wdi_i.h
index 59d0884..5fb24ba 100644
--- a/CORE/WDI/CP/inc/wlan_qct_wdi_i.h
+++ b/CORE/WDI/CP/inc/wlan_qct_wdi_i.h
@@ -465,8 +465,6 @@ typedef enum
   WDI_EXTSCAN_GET_CAPABILITIES_REQ               = 98,
   WDI_EXTSCAN_SET_BSSID_HOTLIST_REQ              = 99,
   WDI_EXTSCAN_RESET_BSSID_HOTLIST_REQ            = 100,
-  WDI_EXTSCAN_SET_SSID_HOTLIST_REQ               = 101,
-  WDI_EXTSCAN_RESET_SSID_HOTLIST_REQ             = 102,
 #endif
 
   WDI_SPOOF_MAC_ADDR_REQ                         = 103,
@@ -861,8 +859,6 @@ typedef enum
   WDI_EXTSCAN_GET_CAPABILITIES_RSP               = 98,
   WDI_EXTSCAN_SET_HOTLIST_BSSID_RSP              = 99,
   WDI_EXTSCAN_RESET_HOTLIST_BSSID_RSP            = 100,
-  WDI_EXTSCAN_SET_HOTLIST_SSID_RSP               = 101,
-  WDI_EXTSCAN_RESET_HOTLIST_SSID_RSP             = 102,
 #endif
   WDI_SPOOF_MAC_ADDR_RSP                         = 103,
   WDI_GET_FW_STATS_RSP                           = 104,
@@ -979,7 +975,6 @@ typedef enum
   WDI_HAL_EXTSCAN_SCAN_AVAILABLE_IND = WDI_HAL_IND_MIN + 24,
   WDI_HAL_EXTSCAN_RESULT_IND         = WDI_HAL_IND_MIN + 25,
   WDI_HAL_EXTSCAN_BSSID_HOTLIST_RESULT_IND    = WDI_HAL_IND_MIN + 26,
-  WDI_HAL_EXTSCAN_SSID_HOTLIST_RESULT_IND    = WDI_HAL_IND_MIN + 27,
 #endif
   WDI_TDLS_CHAN_SWITCH_REQ_RESP      = WDI_HAL_IND_MIN + 28,
   WDI_HAL_DEL_BA_IND                 = WDI_HAL_IND_MIN + 29,
@@ -6232,34 +6227,6 @@ WDI_ProcessEXTScanResetHotlistBSSIDRsp
 );
 
 WDI_Status
-WDI_ProcessEXTScanSetSSIDHotlistReq
-(
-  WDI_ControlBlockType*  pWDICtx,
-  WDI_EventInfoType*     pEventData
-);
-
-WDI_Status
-WDI_ProcessEXTScanSetHotlistSSIDRsp
-(
-  WDI_ControlBlockType*  pWDICtx,
-  WDI_EventInfoType*     pEventData
-);
-
-WDI_Status
-WDI_ProcessEXTScanResetSSIDHotlistReq
-(
-  WDI_ControlBlockType*  pWDICtx,
-  WDI_EventInfoType*     pEventData
-);
-
-WDI_Status
-WDI_ProcessEXTScanResetHotlistSSIDRsp
-(
-  WDI_ControlBlockType*  pWDICtx,
-  WDI_EventInfoType*     pEventData
-);
-
-WDI_Status
 WDI_ProcessHighPriorityDataInfoInd
 (
   WDI_ControlBlockType*  pWDICtx,
@@ -6287,14 +6254,6 @@ WDI_ProcessEXTScanBssidHotListResultInd
    WDI_EventInfoType*     pEventData
 );
 
-WDI_Status
-WDI_ProcessEXTScanSsidHotListResultInd
-(
-   WDI_ControlBlockType*  pWDICtx,
-   WDI_EventInfoType*     pEventData
-);
-
-
 #endif /* WLAN_FEATURE_EXTSCAN */
 
 #ifdef WLAN_FEATURE_LINK_LAYER_STATS
diff --git a/CORE/WDI/CP/src/wlan_qct_wdi.c b/CORE/WDI/CP/src/wlan_qct_wdi.c
index d8c2dd4..2674cab 100644
--- a/CORE/WDI/CP/src/wlan_qct_wdi.c
+++ b/CORE/WDI/CP/src/wlan_qct_wdi.c
@@ -483,8 +483,8 @@ WDI_ReqProcFuncType  pfnReqProcTbl[WDI_MAX_UMAC_IND] =
   WDI_ProcessEXTScanGetCapabilitiesReq,      /* WDI_EXTSCAN_GET_CAPABILITIES_REQ */
   WDI_ProcessEXTScanSetBSSIDHotlistReq,      /* WDI_EXTSCAN_SET_BSSID_HOTLIST_REQ */
   WDI_ProcessEXTScanResetBSSIDHotlistReq,    /* WDI_EXTSCAN_RESET_BSSID_HOTLIST_REQ */
-  WDI_ProcessEXTScanSetSSIDHotlistReq,       /* WDI_EXTSCAN_SET_SSID_HOTLIST_REQ */
-  WDI_ProcessEXTScanResetSSIDHotlistReq,     /* WDI_EXTSCAN_RESET_SSID_HOTLIST_REQ */
+  NULL,                                      /* maintain synchronization though SSID_HOTLIST is deprecated */
+  NULL,
 #else
   NULL,
   NULL,
@@ -834,8 +834,8 @@ WDI_RspProcFuncType  pfnRspProcTbl[WDI_MAX_RESP] =
     WDI_ProcessEXTScanGetCapabilitiesRsp,      /* WDI_EXTSCAN_GET_CAPABILITIES_RSP */
     WDI_ProcessEXTScanSetHotlistBSSIDRsp,      /* WDI_EXTSCAN_SET_HOTLIST_BSSID_RSP */
     WDI_ProcessEXTScanResetHotlistBSSIDRsp,    /* WDI_EXTSCAN_RESET_HOTLIST_BSSID_RSP */
-    WDI_ProcessEXTScanSetHotlistSSIDRsp,      /* WDI_EXTSCAN_SET_HOTLIST_SSID_RSP */
-    WDI_ProcessEXTScanResetHotlistSSIDRsp,    /* WDI_EXTSCAN_RESET_HOTLIST_SSID_RSP */
+    NULL,                                      /* maintain synchronization though SSID_HOTLIST is deprecated */
+    NULL,
 #else
     NULL,
     NULL,
@@ -975,7 +975,7 @@ WDI_RspProcFuncType  pfnRspProcTbl[WDI_MAX_RESP] =
   WDI_ProcessEXTScanScanAvailableInd,       /* WDI_HAL_EXTSCAN_SCAN_AVAILABLE_IND */
   WDI_ProcessEXTScanResultInd,              /* WDI_HAL_EXTSCAN_RESULT_IND */
   WDI_ProcessEXTScanBssidHotListResultInd,  /* WDI_HAL_EXTSCAN_BSSID_HOTLIST_RESULT_IND */
-  WDI_ProcessEXTScanSsidHotListResultInd,  /* WDI_HAL_EXTSCAN_SSID_HOTLIST_RESULT_IND */
+  NULL,                                     /* maintain synchronization though SSID_HOTLIST is deprecated */
 #else
   NULL,
   NULL,
@@ -1336,8 +1336,6 @@ static char *WDI_getReqMsgString(wpt_uint16 wdiReqMsgId)
     CASE_RETURN_STRING( WDI_EXTSCAN_GET_CAPABILITIES_REQ);
     CASE_RETURN_STRING( WDI_EXTSCAN_SET_BSSID_HOTLIST_REQ);
     CASE_RETURN_STRING( WDI_EXTSCAN_RESET_BSSID_HOTLIST_REQ);
-    CASE_RETURN_STRING( WDI_EXTSCAN_SET_SSID_HOTLIST_REQ);
-    CASE_RETURN_STRING( WDI_EXTSCAN_RESET_SSID_HOTLIST_REQ);
     CASE_RETURN_STRING( WDI_HIGH_PRIORITY_DATA_INFO_IND);
 #endif /* WLAN_FEATURE_EXTSCAN */
     CASE_RETURN_STRING( WDI_SPOOF_MAC_ADDR_REQ);
@@ -1778,13 +1776,10 @@ static char *WDI_getRespMsgString(wpt_uint16 wdiRespMsgId)
     CASE_RETURN_STRING( WDI_EXTSCAN_GET_CAPABILITIES_RSP);
     CASE_RETURN_STRING( WDI_EXTSCAN_SET_HOTLIST_BSSID_RSP);
     CASE_RETURN_STRING( WDI_EXTSCAN_RESET_HOTLIST_BSSID_RSP);
-    CASE_RETURN_STRING( WDI_EXTSCAN_SET_HOTLIST_SSID_RSP);
-    CASE_RETURN_STRING( WDI_EXTSCAN_RESET_HOTLIST_SSID_RSP);
     CASE_RETURN_STRING( WDI_HAL_EXTSCAN_PROGRESS_IND);
     CASE_RETURN_STRING( WDI_HAL_EXTSCAN_SCAN_AVAILABLE_IND);
     CASE_RETURN_STRING( WDI_HAL_EXTSCAN_RESULT_IND);
     CASE_RETURN_STRING( WDI_HAL_EXTSCAN_BSSID_HOTLIST_RESULT_IND);
-    CASE_RETURN_STRING( WDI_HAL_EXTSCAN_SSID_HOTLIST_RESULT_IND);
 #endif /* WLAN_FEATURE_EXTSCAN */
     CASE_RETURN_STRING( WDI_GET_FW_STATS_RSP);
     CASE_RETURN_STRING( WDI_ENCRYPT_MSG_RSP);
@@ -25078,10 +25073,6 @@ WDI_2_HAL_REQ_TYPE
        return WLAN_HAL_BSSID_HOTLIST_SET_REQ;
   case WDI_EXTSCAN_RESET_BSSID_HOTLIST_REQ:
        return WLAN_HAL_BSSID_HOTLIST_RESET_REQ;
-  case WDI_EXTSCAN_SET_SSID_HOTLIST_REQ:
-       return WLAN_HAL_SSID_HOTLIST_SET_REQ;
-  case WDI_EXTSCAN_RESET_SSID_HOTLIST_REQ:
-       return WLAN_HAL_SSID_HOTLIST_RESET_REQ;
   case WDI_HIGH_PRIORITY_DATA_INFO_IND:
        return WLAN_HAL_HIGH_PRIORITY_DATA_INFO_REQ;
 #endif /* WLAN_FEATURE_EXTSCAN */
@@ -25469,10 +25460,6 @@ case WLAN_HAL_DEL_STA_SELF_RSP:
        return WDI_EXTSCAN_SET_HOTLIST_BSSID_RSP;
   case WLAN_HAL_BSSID_HOTLIST_RESET_RSP:
        return WDI_EXTSCAN_RESET_HOTLIST_BSSID_RSP;
-  case WLAN_HAL_SSID_HOTLIST_SET_RSP:
-       return WDI_EXTSCAN_SET_HOTLIST_SSID_RSP;
-  case WLAN_HAL_SSID_HOTLIST_RESET_RSP:
-       return WDI_EXTSCAN_RESET_HOTLIST_SSID_RSP;
   case WLAN_HAL_EXT_SCAN_PROGRESS_IND:
        return WDI_HAL_EXTSCAN_PROGRESS_IND;
   case WLAN_HAL_EXT_SCAN_RESULT_AVAILABLE_IND:
@@ -25481,8 +25468,6 @@ case WLAN_HAL_DEL_STA_SELF_RSP:
        return WDI_HAL_EXTSCAN_RESULT_IND;
   case WLAN_HAL_BSSID_HOTLIST_RESULT_IND:
        return WDI_HAL_EXTSCAN_BSSID_HOTLIST_RESULT_IND;
-  case WLAN_HAL_SSID_HOTLIST_RESULT_IND:
-       return WDI_HAL_EXTSCAN_SSID_HOTLIST_RESULT_IND;
 #endif /* WLAN_FEATURE_EXTSCAN */
   case WLAN_HAL_MAC_SPOOFED_SCAN_RSP:
        return WDI_SPOOF_MAC_ADDR_RSP;
@@ -34826,60 +34811,6 @@ WDI_ProcessEXTScanBssidHotListResultInd
 } /* End of WDI_ProcessEXTScanBssidHotListResultInd  */
 
 /**
- @brief Process EXTScan SSID Hotlist Result Indication indication from FW
-
- @param  pWDICtx:         pointer to the WLAN DAL context
-         pEventData:      pointer to the event information structure
-
- @see
- @return Result of the function call
-*/
-WDI_Status
-WDI_ProcessEXTScanSsidHotListResultInd
-(
-  WDI_ControlBlockType*  pWDICtx,
-  WDI_EventInfoType*     pEventData
-)
-{
-    WDI_LowLevelIndType wdiInd;
-    /*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
-
-    VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-                "%s: ", __func__);
-
-    /* sanity check */
-    if (( NULL == pWDICtx ) || ( NULL == pEventData ) ||
-      ( NULL == pEventData->pEventData))
-    {
-        WPAL_TRACE( eWLAN_MODULE_DAL_CTRL, eWLAN_PAL_TRACE_LEVEL_ERROR,
-                 "%s: Invalid parameters", __func__);
-        WDI_ASSERT(0);
-        return WDI_STATUS_E_FAILURE;
-    }
-
-    /* Fill in the indication parameters */
-    wdiInd.wdiIndicationType = WDI_EXTSCAN_SSID_HOTLIST_RESULT_IND;
-
-    /* extract response and send it to UMAC */
-    wdiInd.wdiIndicationData.pEXTScanIndData = (void *)pEventData->pEventData;
-
-    /* Notify UMAC */
-    if (pWDICtx->wdiLowLevelIndCB)
-    {
-        pWDICtx->wdiLowLevelIndCB( &wdiInd, pWDICtx->pIndUserData );
-    }
-    else
-    {
-        VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-                 "%s: WDILowLevelIndCb is null", __func__);
-        WDI_ASSERT(0);
-        return WDI_STATUS_E_FAILURE;
-    }
-    return WDI_STATUS_SUCCESS;
-} /* End of WDI_ProcessEXTScanSsidHotListResultInd  */
-
-
-/**
  @brief WDI_EXTScanGetCapabilitiesReq
 
  @param WDI_EXTScanGetCapabilitiesReqParams: Req parameter for the FW
@@ -35732,286 +35663,6 @@ WDI_ProcessEXTScanResetBSSIDHotlistReq
                        WDI_EXTSCAN_RESET_HOTLIST_BSSID_RSP);
 }
 
-
-/**
- @brief WDI_EXTScanSetSSIDHotlistReq
-
- @param WDI_EXTScanSetSSIDHotlistReqParams: Req parameter for the FW
-        WDI_EXTScanSetSSIDHotlistRspCb: callback for passing back the response
-        of the Req operation received from the device
-        pUserData: user data will be passed back with the callback
-
- @return SUCCESS or FAIL
-*/
-WDI_Status
-WDI_EXTScanSetSSIDHotlistReq(
-      WDI_EXTScanSetSSIDHotlistReqParams* pwdiEXTScanSetSSIDHotlistReqParams,
-      WDI_EXTScanSetSSIDHotlistRspCb  wdiEXTScanSetSSIDHotlistRspCb,
-      void*                   pUserData)
-{
-   WDI_EventInfoType      wdiEventData;
-
-  VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-                  "%s: %d Enter ",__func__, __LINE__);
-  /*------------------------------------------------------------------------
-    Sanity Check
-  ------------------------------------------------------------------------*/
-  if ( eWLAN_PAL_FALSE == gWDIInitialized )
-  {
-     VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_ERROR,
-                "WDI API call before module is initialized - Fail request");
-
-     return WDI_STATUS_E_NOT_ALLOWED;
-  }
-
-  wdiEventData.wdiRequest      = WDI_EXTSCAN_SET_SSID_HOTLIST_REQ;
-  wdiEventData.pEventData      = pwdiEXTScanSetSSIDHotlistReqParams;
-  wdiEventData.uEventDataSize  = sizeof(*pwdiEXTScanSetSSIDHotlistReqParams);
-  wdiEventData.pCBfnc          = wdiEXTScanSetSSIDHotlistRspCb;
-  wdiEventData.pUserData       = pUserData;
-
-  return WDI_PostMainEvent(&gWDICb, WDI_REQUEST_EVENT, &wdiEventData);
-}
-
-/**
- @brief WDI_ProcessEXTScanSetSSIDHotlistReq -
-    Extended Scan Set SSSID Hotlist Request to FW
-
- @param  pWDICtx : wdi context
-         pEventData : indication data
-
- @see
- @return none
-*/
-WDI_Status
-WDI_ProcessEXTScanSetSSIDHotlistReq
-(
-  WDI_ControlBlockType*  pWDICtx,
-  WDI_EventInfoType*     pEventData
-)
-{
-  WDI_EXTScanSetSSIDHotlistReqParams* pwdiEXTScanSetSSIDHotlistReqParams;
-  WDI_EXTScanSetSSIDHotlistRspCb  wdiEXTScanSetSSIDHotlistRspCb;
-  wpt_uint8*               pSendBuffer         = NULL;
-  wpt_uint16               usSendSize          = 0;
-  wpt_uint16               usDataOffset        = 0;
-  tpHalSsidHotlistSetReq   pHalSsidHotlistSetReqParams;
-  int i;
-
-  VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-                  "%s: %d Enter",__func__, __LINE__);
-
-  if (( NULL == pEventData ) || ( NULL == pEventData->pEventData ) ||
-      ( NULL == pEventData->pCBfnc ))
-  {
-     WPAL_TRACE( eWLAN_MODULE_DAL_CTRL, eWLAN_PAL_TRACE_LEVEL_WARN,
-                 "%s: Invalid parameters", __func__);
-     WDI_ASSERT(0);
-     return WDI_STATUS_E_FAILURE;
-  }
-
-  pwdiEXTScanSetSSIDHotlistReqParams =
-      (WDI_EXTScanSetSSIDHotlistReqParams *)pEventData->pEventData;
-  wdiEXTScanSetSSIDHotlistRspCb   =
-      (WDI_EXTScanSetSSIDHotlistRspCb)pEventData->pCBfnc;
-
-  /*-----------------------------------------------------------------------
-    Get message buffer
-    ! TO DO : proper conversion into the HAL Message Request Format
-  -----------------------------------------------------------------------*/
-  if (( WDI_STATUS_SUCCESS != WDI_GetMessageBuffer(
-                                        pWDICtx,
-                                        WDI_EXTSCAN_SET_SSID_HOTLIST_REQ,
-                                        sizeof(tHalSsidHotlistSetReq),
-                                        &pSendBuffer, &usDataOffset,
-                                        &usSendSize))||
-      ( usSendSize < (usDataOffset + sizeof(tHalSsidHotlistSetReq) )))
-  {
-     WPAL_TRACE( eWLAN_MODULE_DAL_CTRL,  eWLAN_PAL_TRACE_LEVEL_WARN,
-              "Unable to get send buffer in %s %p %p %p", __func__,
-                pEventData, pwdiEXTScanSetSSIDHotlistReqParams,
-                wdiEXTScanSetSSIDHotlistRspCb);
-     WDI_ASSERT(0);
-     return WDI_STATUS_E_FAILURE;
-  }
-  pHalSsidHotlistSetReqParams =
-      (tpHalSsidHotlistSetReq) (pSendBuffer + usDataOffset);
-
-  pHalSsidHotlistSetReqParams->requestId =
-                    pwdiEXTScanSetSSIDHotlistReqParams->requestId;
-
-  pHalSsidHotlistSetReqParams->sessionId =
-                    pwdiEXTScanSetSSIDHotlistReqParams->sessionId;
-
-  pHalSsidHotlistSetReqParams->lostSsidSampleSize =
-                    pwdiEXTScanSetSSIDHotlistReqParams->lostSsidSampleSize;;
-
-  pHalSsidHotlistSetReqParams->numSsid =
-                    pwdiEXTScanSetSSIDHotlistReqParams->numSsid;
-
-  for( i = 0; i < pHalSsidHotlistSetReqParams->numSsid; i++){
-
-    wpalMemoryZero(pHalSsidHotlistSetReqParams->ssid[i].ssid, 33);
-    wpalMemoryCopy(pHalSsidHotlistSetReqParams->ssid[i].ssid,
-              pwdiEXTScanSetSSIDHotlistReqParams->ssid[i].ssid.sSSID,
-              pwdiEXTScanSetSSIDHotlistReqParams->ssid[i].ssid.ucLength);
-
-    pHalSsidHotlistSetReqParams->ssid[i].lowRssiThreshold =
-       pwdiEXTScanSetSSIDHotlistReqParams->ssid[i].lowRssiThreshold;
-
-    pHalSsidHotlistSetReqParams->ssid[i].highRssiThreshold =
-        pwdiEXTScanSetSSIDHotlistReqParams->ssid[i].highRssiThreshold;
-
-    pHalSsidHotlistSetReqParams->ssid[i].band =
-        pwdiEXTScanSetSSIDHotlistReqParams->ssid[i].band;
-  }
-
-  VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-          "ReqID %u sessionId %u numSsid %u lost_ssid_sample_size: %u",
-      pHalSsidHotlistSetReqParams->requestId,
-      pHalSsidHotlistSetReqParams->sessionId,
-      pHalSsidHotlistSetReqParams->numSsid,
-      pHalSsidHotlistSetReqParams->lostSsidSampleSize);
-
-  for( i = 0; i < pHalSsidHotlistSetReqParams->numSsid; i++){
-
-    VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-         "%s %d %d) SSID = %s lowRssiThreshold %d highRssiThreshold %d band: %d",
-            __func__, __LINE__, i,
-            pHalSsidHotlistSetReqParams->ssid[i].ssid,
-            pHalSsidHotlistSetReqParams->ssid[i].lowRssiThreshold,
-            pHalSsidHotlistSetReqParams->ssid[i].highRssiThreshold,
-            pHalSsidHotlistSetReqParams->ssid[i].band);
-  }
-
-  pWDICtx->pReqStatusUserData = pEventData->pUserData;
-
-
-  /*-------------------------------------------------------------------------
-    Send EXTScan Stop Request to HAL
-  -------------------------------------------------------------------------*/
-  return  WDI_SendMsg( pWDICtx, pSendBuffer, usSendSize,
-                       wdiEXTScanSetSSIDHotlistRspCb, pEventData->pUserData,
-                       WDI_EXTSCAN_SET_HOTLIST_SSID_RSP);
-}
-
-/**
- @brief WDI_EXTScanResetSSIDHotlistReq
-
- @param WDI_EXTScanResetSSIDHotlistReqParams: Req parameter for the FW
-        WDI_EXTScanResetSSIDHotlistRspCb: callback for passing back the response
-        of the Req operation received from the device
-        pUserData: user data will be passed back with the callback
-
- @return SUCCESS or FAIL
-*/
-WDI_Status
-WDI_EXTScanResetSSIDHotlistReq(
-   WDI_EXTScanResetSSIDHotlistReqParams* pwdiEXTScanResetSSIDHotlistReqParams,
-   WDI_EXTScanResetSSIDHotlistRspCb  wdiEXTScanResetSSIDHotlistRspCb,
-   void*                   pUserData)
-{
-   WDI_EventInfoType      wdiEventData;
-
-  VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-                  "%s: %d",__func__, __LINE__);
-  /*------------------------------------------------------------------------
-    Sanity Check
-  ------------------------------------------------------------------------*/
-  if ( eWLAN_PAL_FALSE == gWDIInitialized )
-  {
-     VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_ERROR,
-                "WDI API call before module is initialized - Fail request");
-
-     return WDI_STATUS_E_NOT_ALLOWED;
-  }
-
-  wdiEventData.wdiRequest      = WDI_EXTSCAN_RESET_SSID_HOTLIST_REQ;
-  wdiEventData.pEventData      = pwdiEXTScanResetSSIDHotlistReqParams;
-  wdiEventData.uEventDataSize  = sizeof(*pwdiEXTScanResetSSIDHotlistReqParams);
-  wdiEventData.pCBfnc          = wdiEXTScanResetSSIDHotlistRspCb;
-  wdiEventData.pUserData       = pUserData;
-
-  return WDI_PostMainEvent(&gWDICb, WDI_REQUEST_EVENT, &wdiEventData);
-}
-
-/**
- @brief WDI_ProcessEXTScanResetSSIDHotlistReq -
-    Extended Scan reset SSID hotlist Request to FW
-
- @param  pWDICtx : wdi context
-         pEventData : indication data
-
- @see
- @return none
-*/
-WDI_Status
-WDI_ProcessEXTScanResetSSIDHotlistReq
-(
-  WDI_ControlBlockType*  pWDICtx,
-  WDI_EventInfoType*     pEventData
-)
-{
-  WDI_EXTScanResetSSIDHotlistReqParams* pwdiEXTScanResetSSIDHotlistReqParams;
-  WDI_EXTScanResetSSIDHotlistRspCb  wdiEXTScanResetSSIDHotlistRspCb;
-  wpt_uint8*               pSendBuffer         = NULL;
-  wpt_uint16               usSendSize          = 0;
-  wpt_uint16               usDataOffset        = 0;
-  tpHalSsidHotlistResetReq     pHalSsidHotlistResetReqParams;
-
-  VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-                  "%s: %d",__func__, __LINE__);
-
-  if (( NULL == pEventData ) || ( NULL == pEventData->pEventData ) ||
-      ( NULL == pEventData->pCBfnc ))
-  {
-     WPAL_TRACE( eWLAN_MODULE_DAL_CTRL, eWLAN_PAL_TRACE_LEVEL_WARN,
-                 "%s: Invalid parameters", __func__);
-     WDI_ASSERT(0);
-     return WDI_STATUS_E_FAILURE;
-  }
-
-  pwdiEXTScanResetSSIDHotlistReqParams =
-      (WDI_EXTScanResetSSIDHotlistReqParams *)pEventData->pEventData;
-  wdiEXTScanResetSSIDHotlistRspCb   =
-      (WDI_EXTScanResetSSIDHotlistRspCb)pEventData->pCBfnc;
-
-  /*-----------------------------------------------------------------------
-    Get message buffer
-    ! TO DO : proper conversion into the HAL Message Request Format
-  -----------------------------------------------------------------------*/
-  if (( WDI_STATUS_SUCCESS != WDI_GetMessageBuffer(
-                                        pWDICtx,
-                                        WDI_EXTSCAN_RESET_SSID_HOTLIST_REQ,
-                                        sizeof(tHalSsidHotlistResetReq),
-                                        &pSendBuffer, &usDataOffset,
-                                        &usSendSize))||
-     ( usSendSize < (usDataOffset + sizeof(tHalSsidHotlistResetReq) )))
-  {
-     WPAL_TRACE( eWLAN_MODULE_DAL_CTRL,  eWLAN_PAL_TRACE_LEVEL_WARN,
-              "Unable to get send buffer in %s %p %p %p", __func__,
-                pEventData, pwdiEXTScanResetSSIDHotlistReqParams,
-                wdiEXTScanResetSSIDHotlistRspCb);
-     WDI_ASSERT(0);
-     return WDI_STATUS_E_FAILURE;
-  }
-  pHalSsidHotlistResetReqParams =
-      (tpHalSsidHotlistResetReq) (pSendBuffer+usDataOffset);
-
-  pHalSsidHotlistResetReqParams->requestId =
-                    pwdiEXTScanResetSSIDHotlistReqParams->requestId;
-
-  pWDICtx->pReqStatusUserData = pEventData->pUserData;
-
-  /*-------------------------------------------------------------------------
-    Send RESET_HOTLIST_SSID Request to HAL
-  -------------------------------------------------------------------------*/
-  return  WDI_SendMsg( pWDICtx, pSendBuffer, usSendSize,
-                       wdiEXTScanResetSSIDHotlistRspCb, pEventData->pUserData,
-                       WDI_EXTSCAN_RESET_HOTLIST_SSID_RSP);
-}
-
-
 /**
  @brief WDI_HighPriorityDataInfoInd
 
@@ -36420,109 +36071,6 @@ WDI_ProcessEXTScanResetHotlistBSSIDRsp
 
   return WDI_STATUS_SUCCESS;
 }
-
-/**
- @brief Process Extended Scan Set hotlist SSID Rsp function (called when a
-        response is being received over the bus from HAL)
-
- @param  pWDICtx:         pointer to the WLAN DAL context
-         pEventData:      pointer to the event information structure
-
- @see
- @return Result of the function call
-*/
-WDI_Status
-WDI_ProcessEXTScanSetHotlistSSIDRsp
-(
-  WDI_ControlBlockType*  pWDICtx,
-  WDI_EventInfoType*     pEventData
-)
-{
-  WDI_EXTScanSetSSIDHotlistRspCb   wdiEXTScanSetSSIDHotlistRspCb;
-
-  VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-                  "%s: %d ",__func__, __LINE__);
-
-
-  /*-------------------------------------------------------------------------
-    Sanity check
-  -------------------------------------------------------------------------*/
-  if (( NULL == pWDICtx ) || ( NULL == pEventData ) ||
-      ( NULL == pEventData->pEventData))
-  {
-     WPAL_TRACE( eWLAN_MODULE_DAL_CTRL, eWLAN_PAL_TRACE_LEVEL_WARN,
-                 "%s: Invalid parameters", __func__);
-     WDI_ASSERT(0);
-     return WDI_STATUS_E_FAILURE;
-  }
-
-  wdiEXTScanSetSSIDHotlistRspCb =
-                (WDI_EXTScanSetSSIDHotlistRspCb)pWDICtx->pfncRspCB;
-  if ( NULL == wdiEXTScanSetSSIDHotlistRspCb)
-  {
-     WPAL_TRACE( eWLAN_MODULE_DAL_CTRL, eWLAN_PAL_TRACE_LEVEL_WARN,
-                 "%s: Callback function Invalid", __func__);
-     WDI_ASSERT(0);
-     return WDI_STATUS_E_FAILURE;
-  }
-
-  wdiEXTScanSetSSIDHotlistRspCb(
-          (void *) pEventData->pEventData, pWDICtx->pRspCBUserData);
-
-  return WDI_STATUS_SUCCESS;
-}
-
-
-/**
- @brief Process Extended Scan Reset Hotlist BSSID Rsp function (called
-        when a response is being received over the bus from HAL)
-
- @param  pWDICtx:         pointer to the WLAN DAL context
-         pEventData:      pointer to the event information structure
-
- @see
- @return Result of the function call
-*/
-WDI_Status
-WDI_ProcessEXTScanResetHotlistSSIDRsp
-(
-  WDI_ControlBlockType*  pWDICtx,
-  WDI_EventInfoType*     pEventData
-)
-{
-  WDI_EXTScanResetSSIDHotlistRspCb   wdiEXTScanResetSSIDHotlistRspCb;
-
-  VOS_TRACE( VOS_MODULE_ID_WDI, VOS_TRACE_LEVEL_INFO,
-                  "%s: %d ",__func__, __LINE__);
-
-
-  /*-------------------------------------------------------------------------
-    Sanity check
-  -------------------------------------------------------------------------*/
-  if (( NULL == pWDICtx ) || ( NULL == pEventData ) ||
-      ( NULL == pEventData->pEventData))
-  {
-     WPAL_TRACE( eWLAN_MODULE_DAL_CTRL, eWLAN_PAL_TRACE_LEVEL_WARN,
-                 "%s: Invalid parameters", __func__);
-     WDI_ASSERT(0);
-     return WDI_STATUS_E_FAILURE;
-  }
-
-  wdiEXTScanResetSSIDHotlistRspCb =
-                (WDI_EXTScanResetSSIDHotlistRspCb)pWDICtx->pfncRspCB;
-  if ( NULL == wdiEXTScanResetSSIDHotlistRspCb)
-  {
-     WPAL_TRACE( eWLAN_MODULE_DAL_CTRL, eWLAN_PAL_TRACE_LEVEL_WARN,
-                 "%s: Callback function Invalid", __func__);
-     WDI_ASSERT(0);
-     return WDI_STATUS_E_FAILURE;
-  }
-
-  wdiEXTScanResetSSIDHotlistRspCb(
-          (void *) pEventData->pEventData, pWDICtx->pRspCBUserData);
-
-  return WDI_STATUS_SUCCESS;
-}
 #endif /* WLAN_FEATURE_EXTSCAN */
 
 /**
-- 
cgit v1.1

